import type { IntrospectionQuery } from 'graphql';
import { HandleRequest } from './helpers/postMessageRelayHelpers';
import type { JSONObject } from './helpers/types';
type InitialState = {
    displayOptions?: {
        docsPanelState?: 'open' | 'closed';
        showGlobalHeader?: boolean;
        showHeadersAndEnvVars?: boolean;
        theme?: 'dark' | 'light';
    };
} & (/**
 * Pass collectionId, operationId to embed the document, headers, variables associated
 * with this operation id if you have access to the operation via your collections.
 */ {
    collectionId: string;
    operationId: string;
} | {
    document?: string;
    variables?: JSONObject;
    headers?: Record<string, string>;
    collectionId?: never;
    operationId?: never;
});
export interface BaseEmbeddableExplorerOptions {
    target: string | HTMLElement;
    initialState?: InitialState;
    /**
     * defaults to 'false'
     */
    persistExplorerState?: boolean;
    /**
     * Whether or not to run Error tracking, Google Analytics event tracking etc
     */
    runTelemetry?: boolean;
    /**
     * optional. defaults to `return fetch(url, fetchOptions)`
     */
    handleRequest?: HandleRequest;
    /**
     * If this is passed, its value will take precedence over your variant's default `includeCookies` value.
     * If you pass `handleRequest`, that will override this value and its behavior.
     *
     * @deprecated Use the connection setting on your variant in Studio to choose whether or not to include cookies
     */
    includeCookies?: boolean;
    /**
     * If this object has values for `inviteToken` and `accountId`,
     * any users who can see your embeddable Explorer are automatically
     * invited to the account your graph is under with the role specified by the `inviteToken`.
     */
    autoInviteOptions?: {
        accountId: string;
        inviteToken: string;
    };
    /**
     * optional. defaults to true.
     * If false, the `width: 100%` and `height: 100%` are not applied to the iframe dynamically.
     * You might pass false here if you enforce a Content Security Policy that disallows dynamic
     * style injection.
     */
    allowDynamicStyles?: boolean;
}
interface EmbeddableExplorerOptionsWithSchema extends BaseEmbeddableExplorerOptions {
    schema: string | IntrospectionQuery;
    endpointUrl: string;
    graphRef?: never;
}
interface EmbeddableExplorerOptionsWithGraphRef extends BaseEmbeddableExplorerOptions {
    graphRef: string;
    schema?: never;
    endpointUrl?: never;
}
export type EmbeddableExplorerOptions = EmbeddableExplorerOptionsWithSchema | EmbeddableExplorerOptionsWithGraphRef;
type InternalEmbeddableExplorerOptions = EmbeddableExplorerOptions & {
    __testLocal__?: boolean;
    runtime?: string;
};
export declare class EmbeddedExplorer {
    options: InternalEmbeddableExplorerOptions;
    handleRequest: HandleRequest;
    embeddedExplorerURL: string;
    embeddedExplorerIFrameElement: HTMLIFrameElement;
    uniqueEmbedInstanceId: number;
    __testLocal__: boolean;
    private disposable;
    constructor(options: EmbeddableExplorerOptions);
    dispose(): void;
    injectEmbed(): HTMLIFrameElement;
    validateOptions(): void;
    getEmbeddedExplorerURL: () => string;
    updateSchemaInEmbed({ schema, }: {
        schema?: string | IntrospectionQuery | undefined;
    }): void;
}
export {};
