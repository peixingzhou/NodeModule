"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationalUnitNotFoundException = exports.OrganizationalUnitNotEmptyException = exports.OrganizationNotEmptyException = exports.PolicyTypeNotAvailableForOrganizationException = exports.MalformedPolicyDocumentException = exports.DuplicatePolicyException = exports.ParentNotFoundException = exports.DuplicateOrganizationalUnitException = exports.PolicyType = exports.PolicyTypeStatus = exports.OrganizationFeatureSet = exports.FinalizingOrganizationException = exports.CreateAccountState = exports.CreateAccountFailureReason = exports.IAMUserAccessToBilling = exports.ConflictException = exports.UnsupportedAPIEndpointException = exports.TargetNotFoundException = exports.PolicyTypeNotEnabledException = exports.PolicyNotFoundException = exports.PolicyChangesInProgressException = exports.DuplicatePolicyAttachmentException = exports.ConstraintViolationException = exports.ConstraintViolationExceptionReason = exports.AlreadyInOrganizationException = exports.AccountOwnerNotVerifiedException = exports.AccountNotRegisteredException = exports.AccountNotFoundException = exports.AccountAlreadyRegisteredException = exports.AccountAlreadyClosedException = exports.AccountStatus = exports.AccountJoinedMethod = exports.TooManyRequestsException = exports.ServiceException = exports.InvalidInputException = exports.InvalidInputExceptionReason = exports.InvalidHandshakeTransitionException = exports.HandshakeNotFoundException = exports.HandshakeConstraintViolationException = exports.HandshakeConstraintViolationExceptionReason = exports.HandshakeAlreadyInStateException = exports.ConcurrentModificationException = exports.AWSOrganizationsNotInUseException = exports.AccessDeniedForDependencyException = exports.AccessDeniedForDependencyExceptionReason = exports.AccessDeniedException = exports.HandshakeState = exports.HandshakeResourceType = exports.HandshakePartyType = exports.ActionType = void 0;
exports.ListHandshakesForOrganizationResponseFilterSensitiveLog = exports.ListHandshakesForAccountResponseFilterSensitiveLog = exports.InviteAccountToOrganizationResponseFilterSensitiveLog = exports.EnableAllFeaturesResponseFilterSensitiveLog = exports.DescribeHandshakeResponseFilterSensitiveLog = exports.DeclineHandshakeResponseFilterSensitiveLog = exports.CancelHandshakeResponseFilterSensitiveLog = exports.AcceptHandshakeResponseFilterSensitiveLog = exports.HandshakeFilterSensitiveLog = exports.HandshakeResourceFilterSensitiveLog = exports.ListDelegatedAdministratorsResponseFilterSensitiveLog = exports.DelegatedAdministratorFilterSensitiveLog = exports.ListCreateAccountStatusResponseFilterSensitiveLog = exports.ListAccountsForParentResponseFilterSensitiveLog = exports.ListAccountsResponseFilterSensitiveLog = exports.InviteAccountToOrganizationRequestFilterSensitiveLog = exports.DescribeOrganizationResponseFilterSensitiveLog = exports.DescribeCreateAccountStatusResponseFilterSensitiveLog = exports.DescribeAccountResponseFilterSensitiveLog = exports.CreateOrganizationResponseFilterSensitiveLog = exports.OrganizationFilterSensitiveLog = exports.CreateGovCloudAccountResponseFilterSensitiveLog = exports.CreateGovCloudAccountRequestFilterSensitiveLog = exports.CreateAccountResponseFilterSensitiveLog = exports.CreateAccountStatusFilterSensitiveLog = exports.CreateAccountRequestFilterSensitiveLog = exports.AccountFilterSensitiveLog = exports.HandshakePartyFilterSensitiveLog = exports.SourceParentNotFoundException = exports.DuplicateAccountException = exports.DestinationParentNotFoundException = exports.TargetType = exports.ParentType = exports.ChildNotFoundException = exports.ChildType = exports.MasterCannotLeaveOrganizationException = exports.DuplicateHandshakeException = exports.PolicyTypeAlreadyEnabledException = exports.RootNotFoundException = exports.PolicyNotAttachedException = exports.EffectivePolicyNotFoundException = exports.EffectivePolicyType = exports.CreateAccountStatusNotFoundException = exports.ResourcePolicyNotFoundException = exports.PolicyInUseException = void 0;
const smithy_client_1 = require("@smithy/smithy-client");
const OrganizationsServiceException_1 = require("./OrganizationsServiceException");
exports.ActionType = {
    ADD_ORGANIZATIONS_SERVICE_LINKED_ROLE: "ADD_ORGANIZATIONS_SERVICE_LINKED_ROLE",
    APPROVE_ALL_FEATURES: "APPROVE_ALL_FEATURES",
    ENABLE_ALL_FEATURES: "ENABLE_ALL_FEATURES",
    INVITE_ACCOUNT_TO_ORGANIZATION: "INVITE",
};
exports.HandshakePartyType = {
    ACCOUNT: "ACCOUNT",
    EMAIL: "EMAIL",
    ORGANIZATION: "ORGANIZATION",
};
exports.HandshakeResourceType = {
    ACCOUNT: "ACCOUNT",
    EMAIL: "EMAIL",
    MASTER_EMAIL: "MASTER_EMAIL",
    MASTER_NAME: "MASTER_NAME",
    NOTES: "NOTES",
    ORGANIZATION: "ORGANIZATION",
    ORGANIZATION_FEATURE_SET: "ORGANIZATION_FEATURE_SET",
    PARENT_HANDSHAKE: "PARENT_HANDSHAKE",
};
exports.HandshakeState = {
    ACCEPTED: "ACCEPTED",
    CANCELED: "CANCELED",
    DECLINED: "DECLINED",
    EXPIRED: "EXPIRED",
    OPEN: "OPEN",
    REQUESTED: "REQUESTED",
};
class AccessDeniedException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.Message = opts.Message;
    }
}
exports.AccessDeniedException = AccessDeniedException;
exports.AccessDeniedForDependencyExceptionReason = {
    ACCESS_DENIED_DURING_CREATE_SERVICE_LINKED_ROLE: "ACCESS_DENIED_DURING_CREATE_SERVICE_LINKED_ROLE",
};
class AccessDeniedForDependencyException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "AccessDeniedForDependencyException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedForDependencyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedForDependencyException.prototype);
        this.Message = opts.Message;
        this.Reason = opts.Reason;
    }
}
exports.AccessDeniedForDependencyException = AccessDeniedForDependencyException;
class AWSOrganizationsNotInUseException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "AWSOrganizationsNotInUseException",
            $fault: "client",
            ...opts,
        });
        this.name = "AWSOrganizationsNotInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AWSOrganizationsNotInUseException.prototype);
        this.Message = opts.Message;
    }
}
exports.AWSOrganizationsNotInUseException = AWSOrganizationsNotInUseException;
class ConcurrentModificationException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "ConcurrentModificationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConcurrentModificationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConcurrentModificationException.prototype);
        this.Message = opts.Message;
    }
}
exports.ConcurrentModificationException = ConcurrentModificationException;
class HandshakeAlreadyInStateException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "HandshakeAlreadyInStateException",
            $fault: "client",
            ...opts,
        });
        this.name = "HandshakeAlreadyInStateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, HandshakeAlreadyInStateException.prototype);
        this.Message = opts.Message;
    }
}
exports.HandshakeAlreadyInStateException = HandshakeAlreadyInStateException;
exports.HandshakeConstraintViolationExceptionReason = {
    ACCOUNT_NUMBER_LIMIT_EXCEEDED: "ACCOUNT_NUMBER_LIMIT_EXCEEDED",
    ALREADY_IN_AN_ORGANIZATION: "ALREADY_IN_AN_ORGANIZATION",
    HANDSHAKE_RATE_LIMIT_EXCEEDED: "HANDSHAKE_RATE_LIMIT_EXCEEDED",
    INVITE_DISABLED_DURING_ENABLE_ALL_FEATURES: "INVITE_DISABLED_DURING_ENABLE_ALL_FEATURES",
    MANAGEMENT_ACCOUNT_EMAIL_NOT_VERIFIED: "MANAGEMENT_ACCOUNT_EMAIL_NOT_VERIFIED",
    ORGANIZATION_ALREADY_HAS_ALL_FEATURES: "ORGANIZATION_ALREADY_HAS_ALL_FEATURES",
    ORGANIZATION_FROM_DIFFERENT_SELLER_OF_RECORD: "ORGANIZATION_FROM_DIFFERENT_SELLER_OF_RECORD",
    ORGANIZATION_IS_ALREADY_PENDING_ALL_FEATURES_MIGRATION: "ORGANIZATION_IS_ALREADY_PENDING_ALL_FEATURES_MIGRATION",
    ORGANIZATION_MEMBERSHIP_CHANGE_RATE_LIMIT_EXCEEDED: "ORGANIZATION_MEMBERSHIP_CHANGE_RATE_LIMIT_EXCEEDED",
    PAYMENT_INSTRUMENT_REQUIRED: "PAYMENT_INSTRUMENT_REQUIRED",
};
class HandshakeConstraintViolationException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "HandshakeConstraintViolationException",
            $fault: "client",
            ...opts,
        });
        this.name = "HandshakeConstraintViolationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, HandshakeConstraintViolationException.prototype);
        this.Message = opts.Message;
        this.Reason = opts.Reason;
    }
}
exports.HandshakeConstraintViolationException = HandshakeConstraintViolationException;
class HandshakeNotFoundException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "HandshakeNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "HandshakeNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, HandshakeNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
exports.HandshakeNotFoundException = HandshakeNotFoundException;
class InvalidHandshakeTransitionException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "InvalidHandshakeTransitionException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidHandshakeTransitionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidHandshakeTransitionException.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidHandshakeTransitionException = InvalidHandshakeTransitionException;
exports.InvalidInputExceptionReason = {
    DUPLICATE_TAG_KEY: "DUPLICATE_TAG_KEY",
    IMMUTABLE_POLICY: "IMMUTABLE_POLICY",
    INPUT_REQUIRED: "INPUT_REQUIRED",
    INVALID_EMAIL_ADDRESS_TARGET: "INVALID_EMAIL_ADDRESS_TARGET",
    INVALID_ENUM: "INVALID_ENUM",
    INVALID_ENUM_POLICY_TYPE: "INVALID_ENUM_POLICY_TYPE",
    INVALID_FULL_NAME_TARGET: "INVALID_FULL_NAME_TARGET",
    INVALID_LIST_MEMBER: "INVALID_LIST_MEMBER",
    INVALID_PAGINATION_TOKEN: "INVALID_NEXT_TOKEN",
    INVALID_PARTY_TYPE_TARGET: "INVALID_PARTY_TYPE_TARGET",
    INVALID_PATTERN: "INVALID_PATTERN",
    INVALID_PATTERN_TARGET_ID: "INVALID_PATTERN_TARGET_ID",
    INVALID_RESOURCE_POLICY_JSON: "INVALID_RESOURCE_POLICY_JSON",
    INVALID_ROLE_NAME: "INVALID_ROLE_NAME",
    INVALID_SYNTAX_ORGANIZATION: "INVALID_SYNTAX_ORGANIZATION_ARN",
    INVALID_SYNTAX_POLICY: "INVALID_SYNTAX_POLICY_ID",
    INVALID_SYSTEM_TAGS_PARAMETER: "INVALID_SYSTEM_TAGS_PARAMETER",
    MAX_FILTER_LIMIT_EXCEEDED: "MAX_LIMIT_EXCEEDED_FILTER",
    MAX_LENGTH_EXCEEDED: "MAX_LENGTH_EXCEEDED",
    MAX_VALUE_EXCEEDED: "MAX_VALUE_EXCEEDED",
    MIN_LENGTH_EXCEEDED: "MIN_LENGTH_EXCEEDED",
    MIN_VALUE_EXCEEDED: "MIN_VALUE_EXCEEDED",
    MOVING_ACCOUNT_BETWEEN_DIFFERENT_ROOTS: "MOVING_ACCOUNT_BETWEEN_DIFFERENT_ROOTS",
    TARGET_NOT_SUPPORTED: "TARGET_NOT_SUPPORTED",
    UNRECOGNIZED_SERVICE_PRINCIPAL: "UNRECOGNIZED_SERVICE_PRINCIPAL",
    UNSUPPORTED_ACTION_IN_RESOURCE_POLICY: "UNSUPPORTED_ACTION_IN_RESOURCE_POLICY",
    UNSUPPORTED_POLICY_TYPE_IN_RESOURCE_POLICY: "UNSUPPORTED_POLICY_TYPE_IN_RESOURCE_POLICY",
    UNSUPPORTED_RESOURCE_IN_RESOURCE_POLICY: "UNSUPPORTED_RESOURCE_IN_RESOURCE_POLICY",
};
class InvalidInputException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "InvalidInputException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidInputException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidInputException.prototype);
        this.Message = opts.Message;
        this.Reason = opts.Reason;
    }
}
exports.InvalidInputException = InvalidInputException;
class ServiceException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "ServiceException",
            $fault: "server",
            ...opts,
        });
        this.name = "ServiceException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ServiceException.prototype);
        this.Message = opts.Message;
    }
}
exports.ServiceException = ServiceException;
class TooManyRequestsException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "TooManyRequestsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
    }
}
exports.TooManyRequestsException = TooManyRequestsException;
exports.AccountJoinedMethod = {
    CREATED: "CREATED",
    INVITED: "INVITED",
};
exports.AccountStatus = {
    ACTIVE: "ACTIVE",
    PENDING_CLOSURE: "PENDING_CLOSURE",
    SUSPENDED: "SUSPENDED",
};
class AccountAlreadyClosedException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "AccountAlreadyClosedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccountAlreadyClosedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccountAlreadyClosedException.prototype);
        this.Message = opts.Message;
    }
}
exports.AccountAlreadyClosedException = AccountAlreadyClosedException;
class AccountAlreadyRegisteredException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "AccountAlreadyRegisteredException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccountAlreadyRegisteredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccountAlreadyRegisteredException.prototype);
        this.Message = opts.Message;
    }
}
exports.AccountAlreadyRegisteredException = AccountAlreadyRegisteredException;
class AccountNotFoundException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "AccountNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccountNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccountNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
exports.AccountNotFoundException = AccountNotFoundException;
class AccountNotRegisteredException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "AccountNotRegisteredException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccountNotRegisteredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccountNotRegisteredException.prototype);
        this.Message = opts.Message;
    }
}
exports.AccountNotRegisteredException = AccountNotRegisteredException;
class AccountOwnerNotVerifiedException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "AccountOwnerNotVerifiedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccountOwnerNotVerifiedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccountOwnerNotVerifiedException.prototype);
        this.Message = opts.Message;
    }
}
exports.AccountOwnerNotVerifiedException = AccountOwnerNotVerifiedException;
class AlreadyInOrganizationException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "AlreadyInOrganizationException",
            $fault: "client",
            ...opts,
        });
        this.name = "AlreadyInOrganizationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AlreadyInOrganizationException.prototype);
        this.Message = opts.Message;
    }
}
exports.AlreadyInOrganizationException = AlreadyInOrganizationException;
exports.ConstraintViolationExceptionReason = {
    ACCOUNT_CANNOT_LEAVE_ORGANIZATION: "ACCOUNT_CANNOT_LEAVE_ORGANIZATION",
    ACCOUNT_CANNOT_LEAVE_WITHOUT_EULA: "ACCOUNT_CANNOT_LEAVE_WITHOUT_EULA",
    ACCOUNT_CANNOT_LEAVE_WITHOUT_PHONE_VERIFICATION: "ACCOUNT_CANNOT_LEAVE_WITHOUT_PHONE_VERIFICATION",
    ACCOUNT_CREATION_NOT_COMPLETE: "ACCOUNT_CREATION_NOT_COMPLETE",
    ACCOUNT_CREATION_RATE_LIMIT_EXCEEDED: "ACCOUNT_CREATION_RATE_LIMIT_EXCEEDED",
    ACCOUNT_NUMBER_LIMIT_EXCEEDED: "ACCOUNT_NUMBER_LIMIT_EXCEEDED",
    CANNOT_CLOSE_MANAGEMENT_ACCOUNT: "CANNOT_CLOSE_MANAGEMENT_ACCOUNT",
    CANNOT_REGISTER_MASTER_AS_DELEGATED_ADMINISTRATOR: "CANNOT_REGISTER_MASTER_AS_DELEGATED_ADMINISTRATOR",
    CANNOT_REMOVE_DELEGATED_ADMINISTRATOR_FROM_ORG: "CANNOT_REMOVE_DELEGATED_ADMINISTRATOR_FROM_ORG",
    CLOSE_ACCOUNT_QUOTA_EXCEEDED: "CLOSE_ACCOUNT_QUOTA_EXCEEDED",
    CLOSE_ACCOUNT_REQUESTS_LIMIT_EXCEEDED: "CLOSE_ACCOUNT_REQUESTS_LIMIT_EXCEEDED",
    CREATE_ORGANIZATION_IN_BILLING_MODE_UNSUPPORTED_REGION: "CREATE_ORGANIZATION_IN_BILLING_MODE_UNSUPPORTED_REGION",
    DELEGATED_ADMINISTRATOR_EXISTS_FOR_THIS_SERVICE: "DELEGATED_ADMINISTRATOR_EXISTS_FOR_THIS_SERVICE",
    EMAIL_VERIFICATION_CODE_EXPIRED: "EMAIL_VERIFICATION_CODE_EXPIRED",
    HANDSHAKE_RATE_LIMIT_EXCEEDED: "HANDSHAKE_RATE_LIMIT_EXCEEDED",
    INVALID_PAYMENT_INSTRUMENT: "INVALID_PAYMENT_INSTRUMENT",
    MASTER_ACCOUNT_ADDRESS_DOES_NOT_MATCH_MARKETPLACE: "MASTER_ACCOUNT_ADDRESS_DOES_NOT_MATCH_MARKETPLACE",
    MASTER_ACCOUNT_MISSING_BUSINESS_LICENSE: "MASTER_ACCOUNT_MISSING_BUSINESS_LICENSE",
    MASTER_ACCOUNT_MISSING_CONTACT_INFO: "MASTER_ACCOUNT_MISSING_CONTACT_INFO",
    MASTER_ACCOUNT_NOT_GOVCLOUD_ENABLED: "MASTER_ACCOUNT_NOT_GOVCLOUD_ENABLED",
    MASTER_ACCOUNT_PAYMENT_INSTRUMENT_REQUIRED: "MASTER_ACCOUNT_PAYMENT_INSTRUMENT_REQUIRED",
    MAX_DELEGATED_ADMINISTRATORS_FOR_SERVICE_LIMIT_EXCEEDED: "MAX_DELEGATED_ADMINISTRATORS_FOR_SERVICE_LIMIT_EXCEEDED",
    MAX_POLICY_TYPE_ATTACHMENT_LIMIT_EXCEEDED: "MAX_POLICY_TYPE_ATTACHMENT_LIMIT_EXCEEDED",
    MAX_TAG_LIMIT_EXCEEDED: "MAX_TAG_LIMIT_EXCEEDED",
    MEMBER_ACCOUNT_PAYMENT_INSTRUMENT_REQUIRED: "MEMBER_ACCOUNT_PAYMENT_INSTRUMENT_REQUIRED",
    MIN_POLICY_TYPE_ATTACHMENT_LIMIT_EXCEEDED: "MIN_POLICY_TYPE_ATTACHMENT_LIMIT_EXCEEDED",
    ORGANIZATION_NOT_IN_ALL_FEATURES_MODE: "ORGANIZATION_NOT_IN_ALL_FEATURES_MODE",
    OU_DEPTH_LIMIT_EXCEEDED: "OU_DEPTH_LIMIT_EXCEEDED",
    OU_NUMBER_LIMIT_EXCEEDED: "OU_NUMBER_LIMIT_EXCEEDED",
    POLICY_CONTENT_LIMIT_EXCEEDED: "POLICY_CONTENT_LIMIT_EXCEEDED",
    POLICY_NUMBER_LIMIT_EXCEEDED: "POLICY_NUMBER_LIMIT_EXCEEDED",
    SERVICE_ACCESS_NOT_ENABLED: "SERVICE_ACCESS_NOT_ENABLED",
    TAG_POLICY_VIOLATION: "TAG_POLICY_VIOLATION",
    WAIT_PERIOD_ACTIVE: "WAIT_PERIOD_ACTIVE",
};
class ConstraintViolationException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "ConstraintViolationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConstraintViolationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConstraintViolationException.prototype);
        this.Message = opts.Message;
        this.Reason = opts.Reason;
    }
}
exports.ConstraintViolationException = ConstraintViolationException;
class DuplicatePolicyAttachmentException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "DuplicatePolicyAttachmentException",
            $fault: "client",
            ...opts,
        });
        this.name = "DuplicatePolicyAttachmentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DuplicatePolicyAttachmentException.prototype);
        this.Message = opts.Message;
    }
}
exports.DuplicatePolicyAttachmentException = DuplicatePolicyAttachmentException;
class PolicyChangesInProgressException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "PolicyChangesInProgressException",
            $fault: "client",
            ...opts,
        });
        this.name = "PolicyChangesInProgressException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PolicyChangesInProgressException.prototype);
        this.Message = opts.Message;
    }
}
exports.PolicyChangesInProgressException = PolicyChangesInProgressException;
class PolicyNotFoundException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "PolicyNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "PolicyNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PolicyNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
exports.PolicyNotFoundException = PolicyNotFoundException;
class PolicyTypeNotEnabledException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "PolicyTypeNotEnabledException",
            $fault: "client",
            ...opts,
        });
        this.name = "PolicyTypeNotEnabledException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PolicyTypeNotEnabledException.prototype);
        this.Message = opts.Message;
    }
}
exports.PolicyTypeNotEnabledException = PolicyTypeNotEnabledException;
class TargetNotFoundException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "TargetNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "TargetNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TargetNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
exports.TargetNotFoundException = TargetNotFoundException;
class UnsupportedAPIEndpointException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "UnsupportedAPIEndpointException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnsupportedAPIEndpointException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedAPIEndpointException.prototype);
        this.Message = opts.Message;
    }
}
exports.UnsupportedAPIEndpointException = UnsupportedAPIEndpointException;
class ConflictException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
    }
}
exports.ConflictException = ConflictException;
exports.IAMUserAccessToBilling = {
    ALLOW: "ALLOW",
    DENY: "DENY",
};
exports.CreateAccountFailureReason = {
    ACCOUNT_LIMIT_EXCEEDED: "ACCOUNT_LIMIT_EXCEEDED",
    CONCURRENT_ACCOUNT_MODIFICATION: "CONCURRENT_ACCOUNT_MODIFICATION",
    EMAIL_ALREADY_EXISTS: "EMAIL_ALREADY_EXISTS",
    FAILED_BUSINESS_VALIDATION: "FAILED_BUSINESS_VALIDATION",
    GOVCLOUD_ACCOUNT_ALREADY_EXISTS: "GOVCLOUD_ACCOUNT_ALREADY_EXISTS",
    INTERNAL_FAILURE: "INTERNAL_FAILURE",
    INVALID_ADDRESS: "INVALID_ADDRESS",
    INVALID_EMAIL: "INVALID_EMAIL",
    INVALID_IDENTITY_FOR_BUSINESS_VALIDATION: "INVALID_IDENTITY_FOR_BUSINESS_VALIDATION",
    INVALID_PAYMENT_INSTRUMENT: "INVALID_PAYMENT_INSTRUMENT",
    MISSING_BUSINESS_VALIDATION: "MISSING_BUSINESS_VALIDATION",
    MISSING_PAYMENT_INSTRUMENT: "MISSING_PAYMENT_INSTRUMENT",
    PENDING_BUSINESS_VALIDATIONv: "PENDING_BUSINESS_VALIDATION",
    UNKNOWN_BUSINESS_VALIDATION: "UNKNOWN_BUSINESS_VALIDATION",
    UPDATE_EXISTING_RESOURCE_POLICY_WITH_TAGS_NOT_SUPPORTED: "UPDATE_EXISTING_RESOURCE_POLICY_WITH_TAGS_NOT_SUPPORTED",
};
exports.CreateAccountState = {
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    SUCCEEDED: "SUCCEEDED",
};
class FinalizingOrganizationException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "FinalizingOrganizationException",
            $fault: "client",
            ...opts,
        });
        this.name = "FinalizingOrganizationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, FinalizingOrganizationException.prototype);
        this.Message = opts.Message;
    }
}
exports.FinalizingOrganizationException = FinalizingOrganizationException;
exports.OrganizationFeatureSet = {
    ALL: "ALL",
    CONSOLIDATED_BILLING: "CONSOLIDATED_BILLING",
};
exports.PolicyTypeStatus = {
    ENABLED: "ENABLED",
    PENDING_DISABLE: "PENDING_DISABLE",
    PENDING_ENABLE: "PENDING_ENABLE",
};
exports.PolicyType = {
    AISERVICES_OPT_OUT_POLICY: "AISERVICES_OPT_OUT_POLICY",
    BACKUP_POLICY: "BACKUP_POLICY",
    SERVICE_CONTROL_POLICY: "SERVICE_CONTROL_POLICY",
    TAG_POLICY: "TAG_POLICY",
};
class DuplicateOrganizationalUnitException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "DuplicateOrganizationalUnitException",
            $fault: "client",
            ...opts,
        });
        this.name = "DuplicateOrganizationalUnitException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DuplicateOrganizationalUnitException.prototype);
        this.Message = opts.Message;
    }
}
exports.DuplicateOrganizationalUnitException = DuplicateOrganizationalUnitException;
class ParentNotFoundException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "ParentNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ParentNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ParentNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
exports.ParentNotFoundException = ParentNotFoundException;
class DuplicatePolicyException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "DuplicatePolicyException",
            $fault: "client",
            ...opts,
        });
        this.name = "DuplicatePolicyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DuplicatePolicyException.prototype);
        this.Message = opts.Message;
    }
}
exports.DuplicatePolicyException = DuplicatePolicyException;
class MalformedPolicyDocumentException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "MalformedPolicyDocumentException",
            $fault: "client",
            ...opts,
        });
        this.name = "MalformedPolicyDocumentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MalformedPolicyDocumentException.prototype);
        this.Message = opts.Message;
    }
}
exports.MalformedPolicyDocumentException = MalformedPolicyDocumentException;
class PolicyTypeNotAvailableForOrganizationException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "PolicyTypeNotAvailableForOrganizationException",
            $fault: "client",
            ...opts,
        });
        this.name = "PolicyTypeNotAvailableForOrganizationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PolicyTypeNotAvailableForOrganizationException.prototype);
        this.Message = opts.Message;
    }
}
exports.PolicyTypeNotAvailableForOrganizationException = PolicyTypeNotAvailableForOrganizationException;
class OrganizationNotEmptyException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "OrganizationNotEmptyException",
            $fault: "client",
            ...opts,
        });
        this.name = "OrganizationNotEmptyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OrganizationNotEmptyException.prototype);
        this.Message = opts.Message;
    }
}
exports.OrganizationNotEmptyException = OrganizationNotEmptyException;
class OrganizationalUnitNotEmptyException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "OrganizationalUnitNotEmptyException",
            $fault: "client",
            ...opts,
        });
        this.name = "OrganizationalUnitNotEmptyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OrganizationalUnitNotEmptyException.prototype);
        this.Message = opts.Message;
    }
}
exports.OrganizationalUnitNotEmptyException = OrganizationalUnitNotEmptyException;
class OrganizationalUnitNotFoundException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "OrganizationalUnitNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "OrganizationalUnitNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OrganizationalUnitNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
exports.OrganizationalUnitNotFoundException = OrganizationalUnitNotFoundException;
class PolicyInUseException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "PolicyInUseException",
            $fault: "client",
            ...opts,
        });
        this.name = "PolicyInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PolicyInUseException.prototype);
        this.Message = opts.Message;
    }
}
exports.PolicyInUseException = PolicyInUseException;
class ResourcePolicyNotFoundException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "ResourcePolicyNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourcePolicyNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourcePolicyNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
exports.ResourcePolicyNotFoundException = ResourcePolicyNotFoundException;
class CreateAccountStatusNotFoundException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "CreateAccountStatusNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "CreateAccountStatusNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CreateAccountStatusNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
exports.CreateAccountStatusNotFoundException = CreateAccountStatusNotFoundException;
exports.EffectivePolicyType = {
    AISERVICES_OPT_OUT_POLICY: "AISERVICES_OPT_OUT_POLICY",
    BACKUP_POLICY: "BACKUP_POLICY",
    TAG_POLICY: "TAG_POLICY",
};
class EffectivePolicyNotFoundException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "EffectivePolicyNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "EffectivePolicyNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, EffectivePolicyNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
exports.EffectivePolicyNotFoundException = EffectivePolicyNotFoundException;
class PolicyNotAttachedException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "PolicyNotAttachedException",
            $fault: "client",
            ...opts,
        });
        this.name = "PolicyNotAttachedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PolicyNotAttachedException.prototype);
        this.Message = opts.Message;
    }
}
exports.PolicyNotAttachedException = PolicyNotAttachedException;
class RootNotFoundException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "RootNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "RootNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RootNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
exports.RootNotFoundException = RootNotFoundException;
class PolicyTypeAlreadyEnabledException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "PolicyTypeAlreadyEnabledException",
            $fault: "client",
            ...opts,
        });
        this.name = "PolicyTypeAlreadyEnabledException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PolicyTypeAlreadyEnabledException.prototype);
        this.Message = opts.Message;
    }
}
exports.PolicyTypeAlreadyEnabledException = PolicyTypeAlreadyEnabledException;
class DuplicateHandshakeException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "DuplicateHandshakeException",
            $fault: "client",
            ...opts,
        });
        this.name = "DuplicateHandshakeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DuplicateHandshakeException.prototype);
        this.Message = opts.Message;
    }
}
exports.DuplicateHandshakeException = DuplicateHandshakeException;
class MasterCannotLeaveOrganizationException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "MasterCannotLeaveOrganizationException",
            $fault: "client",
            ...opts,
        });
        this.name = "MasterCannotLeaveOrganizationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MasterCannotLeaveOrganizationException.prototype);
        this.Message = opts.Message;
    }
}
exports.MasterCannotLeaveOrganizationException = MasterCannotLeaveOrganizationException;
exports.ChildType = {
    ACCOUNT: "ACCOUNT",
    ORGANIZATIONAL_UNIT: "ORGANIZATIONAL_UNIT",
};
class ChildNotFoundException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "ChildNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ChildNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ChildNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
exports.ChildNotFoundException = ChildNotFoundException;
exports.ParentType = {
    ORGANIZATIONAL_UNIT: "ORGANIZATIONAL_UNIT",
    ROOT: "ROOT",
};
exports.TargetType = {
    ACCOUNT: "ACCOUNT",
    ORGANIZATIONAL_UNIT: "ORGANIZATIONAL_UNIT",
    ROOT: "ROOT",
};
class DestinationParentNotFoundException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "DestinationParentNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "DestinationParentNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DestinationParentNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
exports.DestinationParentNotFoundException = DestinationParentNotFoundException;
class DuplicateAccountException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "DuplicateAccountException",
            $fault: "client",
            ...opts,
        });
        this.name = "DuplicateAccountException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DuplicateAccountException.prototype);
        this.Message = opts.Message;
    }
}
exports.DuplicateAccountException = DuplicateAccountException;
class SourceParentNotFoundException extends OrganizationsServiceException_1.OrganizationsServiceException {
    constructor(opts) {
        super({
            name: "SourceParentNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "SourceParentNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, SourceParentNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
exports.SourceParentNotFoundException = SourceParentNotFoundException;
const HandshakePartyFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Id && { Id: smithy_client_1.SENSITIVE_STRING }),
});
exports.HandshakePartyFilterSensitiveLog = HandshakePartyFilterSensitiveLog;
const AccountFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Email && { Email: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.Name && { Name: smithy_client_1.SENSITIVE_STRING }),
});
exports.AccountFilterSensitiveLog = AccountFilterSensitiveLog;
const CreateAccountRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Email && { Email: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.AccountName && { AccountName: smithy_client_1.SENSITIVE_STRING }),
});
exports.CreateAccountRequestFilterSensitiveLog = CreateAccountRequestFilterSensitiveLog;
const CreateAccountStatusFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccountName && { AccountName: smithy_client_1.SENSITIVE_STRING }),
});
exports.CreateAccountStatusFilterSensitiveLog = CreateAccountStatusFilterSensitiveLog;
const CreateAccountResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.CreateAccountStatus && {
        CreateAccountStatus: (0, exports.CreateAccountStatusFilterSensitiveLog)(obj.CreateAccountStatus),
    }),
});
exports.CreateAccountResponseFilterSensitiveLog = CreateAccountResponseFilterSensitiveLog;
const CreateGovCloudAccountRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Email && { Email: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.AccountName && { AccountName: smithy_client_1.SENSITIVE_STRING }),
});
exports.CreateGovCloudAccountRequestFilterSensitiveLog = CreateGovCloudAccountRequestFilterSensitiveLog;
const CreateGovCloudAccountResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.CreateAccountStatus && {
        CreateAccountStatus: (0, exports.CreateAccountStatusFilterSensitiveLog)(obj.CreateAccountStatus),
    }),
});
exports.CreateGovCloudAccountResponseFilterSensitiveLog = CreateGovCloudAccountResponseFilterSensitiveLog;
const OrganizationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.MasterAccountEmail && { MasterAccountEmail: smithy_client_1.SENSITIVE_STRING }),
});
exports.OrganizationFilterSensitiveLog = OrganizationFilterSensitiveLog;
const CreateOrganizationResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Organization && { Organization: (0, exports.OrganizationFilterSensitiveLog)(obj.Organization) }),
});
exports.CreateOrganizationResponseFilterSensitiveLog = CreateOrganizationResponseFilterSensitiveLog;
const DescribeAccountResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Account && { Account: (0, exports.AccountFilterSensitiveLog)(obj.Account) }),
});
exports.DescribeAccountResponseFilterSensitiveLog = DescribeAccountResponseFilterSensitiveLog;
const DescribeCreateAccountStatusResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.CreateAccountStatus && {
        CreateAccountStatus: (0, exports.CreateAccountStatusFilterSensitiveLog)(obj.CreateAccountStatus),
    }),
});
exports.DescribeCreateAccountStatusResponseFilterSensitiveLog = DescribeCreateAccountStatusResponseFilterSensitiveLog;
const DescribeOrganizationResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Organization && { Organization: (0, exports.OrganizationFilterSensitiveLog)(obj.Organization) }),
});
exports.DescribeOrganizationResponseFilterSensitiveLog = DescribeOrganizationResponseFilterSensitiveLog;
const InviteAccountToOrganizationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Target && { Target: (0, exports.HandshakePartyFilterSensitiveLog)(obj.Target) }),
    ...(obj.Notes && { Notes: smithy_client_1.SENSITIVE_STRING }),
});
exports.InviteAccountToOrganizationRequestFilterSensitiveLog = InviteAccountToOrganizationRequestFilterSensitiveLog;
const ListAccountsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Accounts && { Accounts: obj.Accounts.map((item) => (0, exports.AccountFilterSensitiveLog)(item)) }),
});
exports.ListAccountsResponseFilterSensitiveLog = ListAccountsResponseFilterSensitiveLog;
const ListAccountsForParentResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Accounts && { Accounts: obj.Accounts.map((item) => (0, exports.AccountFilterSensitiveLog)(item)) }),
});
exports.ListAccountsForParentResponseFilterSensitiveLog = ListAccountsForParentResponseFilterSensitiveLog;
const ListCreateAccountStatusResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.CreateAccountStatuses && {
        CreateAccountStatuses: obj.CreateAccountStatuses.map((item) => (0, exports.CreateAccountStatusFilterSensitiveLog)(item)),
    }),
});
exports.ListCreateAccountStatusResponseFilterSensitiveLog = ListCreateAccountStatusResponseFilterSensitiveLog;
const DelegatedAdministratorFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Email && { Email: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.Name && { Name: smithy_client_1.SENSITIVE_STRING }),
});
exports.DelegatedAdministratorFilterSensitiveLog = DelegatedAdministratorFilterSensitiveLog;
const ListDelegatedAdministratorsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DelegatedAdministrators && {
        DelegatedAdministrators: obj.DelegatedAdministrators.map((item) => (0, exports.DelegatedAdministratorFilterSensitiveLog)(item)),
    }),
});
exports.ListDelegatedAdministratorsResponseFilterSensitiveLog = ListDelegatedAdministratorsResponseFilterSensitiveLog;
const HandshakeResourceFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Value && { Value: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.Resources && { Resources: obj.Resources.map((item) => (0, exports.HandshakeResourceFilterSensitiveLog)(item)) }),
});
exports.HandshakeResourceFilterSensitiveLog = HandshakeResourceFilterSensitiveLog;
const HandshakeFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Parties && { Parties: obj.Parties.map((item) => (0, exports.HandshakePartyFilterSensitiveLog)(item)) }),
    ...(obj.Resources && { Resources: obj.Resources.map((item) => (0, exports.HandshakeResourceFilterSensitiveLog)(item)) }),
});
exports.HandshakeFilterSensitiveLog = HandshakeFilterSensitiveLog;
const AcceptHandshakeResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Handshake && { Handshake: (0, exports.HandshakeFilterSensitiveLog)(obj.Handshake) }),
});
exports.AcceptHandshakeResponseFilterSensitiveLog = AcceptHandshakeResponseFilterSensitiveLog;
const CancelHandshakeResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Handshake && { Handshake: (0, exports.HandshakeFilterSensitiveLog)(obj.Handshake) }),
});
exports.CancelHandshakeResponseFilterSensitiveLog = CancelHandshakeResponseFilterSensitiveLog;
const DeclineHandshakeResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Handshake && { Handshake: (0, exports.HandshakeFilterSensitiveLog)(obj.Handshake) }),
});
exports.DeclineHandshakeResponseFilterSensitiveLog = DeclineHandshakeResponseFilterSensitiveLog;
const DescribeHandshakeResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Handshake && { Handshake: (0, exports.HandshakeFilterSensitiveLog)(obj.Handshake) }),
});
exports.DescribeHandshakeResponseFilterSensitiveLog = DescribeHandshakeResponseFilterSensitiveLog;
const EnableAllFeaturesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Handshake && { Handshake: (0, exports.HandshakeFilterSensitiveLog)(obj.Handshake) }),
});
exports.EnableAllFeaturesResponseFilterSensitiveLog = EnableAllFeaturesResponseFilterSensitiveLog;
const InviteAccountToOrganizationResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Handshake && { Handshake: (0, exports.HandshakeFilterSensitiveLog)(obj.Handshake) }),
});
exports.InviteAccountToOrganizationResponseFilterSensitiveLog = InviteAccountToOrganizationResponseFilterSensitiveLog;
const ListHandshakesForAccountResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ListHandshakesForAccountResponseFilterSensitiveLog = ListHandshakesForAccountResponseFilterSensitiveLog;
const ListHandshakesForOrganizationResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ListHandshakesForOrganizationResponseFilterSensitiveLog = ListHandshakesForOrganizationResponseFilterSensitiveLog;
