"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.se_RegisterDelegatedAdministratorCommand = exports.se_PutResourcePolicyCommand = exports.se_MoveAccountCommand = exports.se_ListTargetsForPolicyCommand = exports.se_ListTagsForResourceCommand = exports.se_ListRootsCommand = exports.se_ListPoliciesForTargetCommand = exports.se_ListPoliciesCommand = exports.se_ListParentsCommand = exports.se_ListOrganizationalUnitsForParentCommand = exports.se_ListHandshakesForOrganizationCommand = exports.se_ListHandshakesForAccountCommand = exports.se_ListDelegatedServicesForAccountCommand = exports.se_ListDelegatedAdministratorsCommand = exports.se_ListCreateAccountStatusCommand = exports.se_ListChildrenCommand = exports.se_ListAWSServiceAccessForOrganizationCommand = exports.se_ListAccountsForParentCommand = exports.se_ListAccountsCommand = exports.se_LeaveOrganizationCommand = exports.se_InviteAccountToOrganizationCommand = exports.se_EnablePolicyTypeCommand = exports.se_EnableAWSServiceAccessCommand = exports.se_EnableAllFeaturesCommand = exports.se_DisablePolicyTypeCommand = exports.se_DisableAWSServiceAccessCommand = exports.se_DetachPolicyCommand = exports.se_DescribeResourcePolicyCommand = exports.se_DescribePolicyCommand = exports.se_DescribeOrganizationalUnitCommand = exports.se_DescribeOrganizationCommand = exports.se_DescribeHandshakeCommand = exports.se_DescribeEffectivePolicyCommand = exports.se_DescribeCreateAccountStatusCommand = exports.se_DescribeAccountCommand = exports.se_DeregisterDelegatedAdministratorCommand = exports.se_DeleteResourcePolicyCommand = exports.se_DeletePolicyCommand = exports.se_DeleteOrganizationalUnitCommand = exports.se_DeleteOrganizationCommand = exports.se_DeclineHandshakeCommand = exports.se_CreatePolicyCommand = exports.se_CreateOrganizationalUnitCommand = exports.se_CreateOrganizationCommand = exports.se_CreateGovCloudAccountCommand = exports.se_CreateAccountCommand = exports.se_CloseAccountCommand = exports.se_CancelHandshakeCommand = exports.se_AttachPolicyCommand = exports.se_AcceptHandshakeCommand = void 0;
exports.de_ListRootsCommand = exports.de_ListPoliciesForTargetCommand = exports.de_ListPoliciesCommand = exports.de_ListParentsCommand = exports.de_ListOrganizationalUnitsForParentCommand = exports.de_ListHandshakesForOrganizationCommand = exports.de_ListHandshakesForAccountCommand = exports.de_ListDelegatedServicesForAccountCommand = exports.de_ListDelegatedAdministratorsCommand = exports.de_ListCreateAccountStatusCommand = exports.de_ListChildrenCommand = exports.de_ListAWSServiceAccessForOrganizationCommand = exports.de_ListAccountsForParentCommand = exports.de_ListAccountsCommand = exports.de_LeaveOrganizationCommand = exports.de_InviteAccountToOrganizationCommand = exports.de_EnablePolicyTypeCommand = exports.de_EnableAWSServiceAccessCommand = exports.de_EnableAllFeaturesCommand = exports.de_DisablePolicyTypeCommand = exports.de_DisableAWSServiceAccessCommand = exports.de_DetachPolicyCommand = exports.de_DescribeResourcePolicyCommand = exports.de_DescribePolicyCommand = exports.de_DescribeOrganizationalUnitCommand = exports.de_DescribeOrganizationCommand = exports.de_DescribeHandshakeCommand = exports.de_DescribeEffectivePolicyCommand = exports.de_DescribeCreateAccountStatusCommand = exports.de_DescribeAccountCommand = exports.de_DeregisterDelegatedAdministratorCommand = exports.de_DeleteResourcePolicyCommand = exports.de_DeletePolicyCommand = exports.de_DeleteOrganizationalUnitCommand = exports.de_DeleteOrganizationCommand = exports.de_DeclineHandshakeCommand = exports.de_CreatePolicyCommand = exports.de_CreateOrganizationalUnitCommand = exports.de_CreateOrganizationCommand = exports.de_CreateGovCloudAccountCommand = exports.de_CreateAccountCommand = exports.de_CloseAccountCommand = exports.de_CancelHandshakeCommand = exports.de_AttachPolicyCommand = exports.de_AcceptHandshakeCommand = exports.se_UpdatePolicyCommand = exports.se_UpdateOrganizationalUnitCommand = exports.se_UntagResourceCommand = exports.se_TagResourceCommand = exports.se_RemoveAccountFromOrganizationCommand = void 0;
exports.de_UpdatePolicyCommand = exports.de_UpdateOrganizationalUnitCommand = exports.de_UntagResourceCommand = exports.de_TagResourceCommand = exports.de_RemoveAccountFromOrganizationCommand = exports.de_RegisterDelegatedAdministratorCommand = exports.de_PutResourcePolicyCommand = exports.de_MoveAccountCommand = exports.de_ListTargetsForPolicyCommand = exports.de_ListTagsForResourceCommand = void 0;
const protocol_http_1 = require("@smithy/protocol-http");
const smithy_client_1 = require("@smithy/smithy-client");
const models_0_1 = require("../models/models_0");
const OrganizationsServiceException_1 = require("../models/OrganizationsServiceException");
const se_AcceptHandshakeCommand = async (input, context) => {
    const headers = sharedHeaders("AcceptHandshake");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_AcceptHandshakeCommand = se_AcceptHandshakeCommand;
const se_AttachPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("AttachPolicy");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_AttachPolicyCommand = se_AttachPolicyCommand;
const se_CancelHandshakeCommand = async (input, context) => {
    const headers = sharedHeaders("CancelHandshake");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CancelHandshakeCommand = se_CancelHandshakeCommand;
const se_CloseAccountCommand = async (input, context) => {
    const headers = sharedHeaders("CloseAccount");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CloseAccountCommand = se_CloseAccountCommand;
const se_CreateAccountCommand = async (input, context) => {
    const headers = sharedHeaders("CreateAccount");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateAccountCommand = se_CreateAccountCommand;
const se_CreateGovCloudAccountCommand = async (input, context) => {
    const headers = sharedHeaders("CreateGovCloudAccount");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateGovCloudAccountCommand = se_CreateGovCloudAccountCommand;
const se_CreateOrganizationCommand = async (input, context) => {
    const headers = sharedHeaders("CreateOrganization");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateOrganizationCommand = se_CreateOrganizationCommand;
const se_CreateOrganizationalUnitCommand = async (input, context) => {
    const headers = sharedHeaders("CreateOrganizationalUnit");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateOrganizationalUnitCommand = se_CreateOrganizationalUnitCommand;
const se_CreatePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("CreatePolicy");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreatePolicyCommand = se_CreatePolicyCommand;
const se_DeclineHandshakeCommand = async (input, context) => {
    const headers = sharedHeaders("DeclineHandshake");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeclineHandshakeCommand = se_DeclineHandshakeCommand;
const se_DeleteOrganizationCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteOrganization");
    const body = "{}";
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteOrganizationCommand = se_DeleteOrganizationCommand;
const se_DeleteOrganizationalUnitCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteOrganizationalUnit");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteOrganizationalUnitCommand = se_DeleteOrganizationalUnitCommand;
const se_DeletePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DeletePolicy");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeletePolicyCommand = se_DeletePolicyCommand;
const se_DeleteResourcePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteResourcePolicy");
    const body = "{}";
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteResourcePolicyCommand = se_DeleteResourcePolicyCommand;
const se_DeregisterDelegatedAdministratorCommand = async (input, context) => {
    const headers = sharedHeaders("DeregisterDelegatedAdministrator");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeregisterDelegatedAdministratorCommand = se_DeregisterDelegatedAdministratorCommand;
const se_DescribeAccountCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeAccount");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeAccountCommand = se_DescribeAccountCommand;
const se_DescribeCreateAccountStatusCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeCreateAccountStatus");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeCreateAccountStatusCommand = se_DescribeCreateAccountStatusCommand;
const se_DescribeEffectivePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeEffectivePolicy");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeEffectivePolicyCommand = se_DescribeEffectivePolicyCommand;
const se_DescribeHandshakeCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeHandshake");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeHandshakeCommand = se_DescribeHandshakeCommand;
const se_DescribeOrganizationCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeOrganization");
    const body = "{}";
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeOrganizationCommand = se_DescribeOrganizationCommand;
const se_DescribeOrganizationalUnitCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeOrganizationalUnit");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeOrganizationalUnitCommand = se_DescribeOrganizationalUnitCommand;
const se_DescribePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DescribePolicy");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribePolicyCommand = se_DescribePolicyCommand;
const se_DescribeResourcePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeResourcePolicy");
    const body = "{}";
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeResourcePolicyCommand = se_DescribeResourcePolicyCommand;
const se_DetachPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DetachPolicy");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DetachPolicyCommand = se_DetachPolicyCommand;
const se_DisableAWSServiceAccessCommand = async (input, context) => {
    const headers = sharedHeaders("DisableAWSServiceAccess");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DisableAWSServiceAccessCommand = se_DisableAWSServiceAccessCommand;
const se_DisablePolicyTypeCommand = async (input, context) => {
    const headers = sharedHeaders("DisablePolicyType");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DisablePolicyTypeCommand = se_DisablePolicyTypeCommand;
const se_EnableAllFeaturesCommand = async (input, context) => {
    const headers = sharedHeaders("EnableAllFeatures");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_EnableAllFeaturesCommand = se_EnableAllFeaturesCommand;
const se_EnableAWSServiceAccessCommand = async (input, context) => {
    const headers = sharedHeaders("EnableAWSServiceAccess");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_EnableAWSServiceAccessCommand = se_EnableAWSServiceAccessCommand;
const se_EnablePolicyTypeCommand = async (input, context) => {
    const headers = sharedHeaders("EnablePolicyType");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_EnablePolicyTypeCommand = se_EnablePolicyTypeCommand;
const se_InviteAccountToOrganizationCommand = async (input, context) => {
    const headers = sharedHeaders("InviteAccountToOrganization");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_InviteAccountToOrganizationCommand = se_InviteAccountToOrganizationCommand;
const se_LeaveOrganizationCommand = async (input, context) => {
    const headers = sharedHeaders("LeaveOrganization");
    const body = "{}";
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_LeaveOrganizationCommand = se_LeaveOrganizationCommand;
const se_ListAccountsCommand = async (input, context) => {
    const headers = sharedHeaders("ListAccounts");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListAccountsCommand = se_ListAccountsCommand;
const se_ListAccountsForParentCommand = async (input, context) => {
    const headers = sharedHeaders("ListAccountsForParent");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListAccountsForParentCommand = se_ListAccountsForParentCommand;
const se_ListAWSServiceAccessForOrganizationCommand = async (input, context) => {
    const headers = sharedHeaders("ListAWSServiceAccessForOrganization");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListAWSServiceAccessForOrganizationCommand = se_ListAWSServiceAccessForOrganizationCommand;
const se_ListChildrenCommand = async (input, context) => {
    const headers = sharedHeaders("ListChildren");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListChildrenCommand = se_ListChildrenCommand;
const se_ListCreateAccountStatusCommand = async (input, context) => {
    const headers = sharedHeaders("ListCreateAccountStatus");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListCreateAccountStatusCommand = se_ListCreateAccountStatusCommand;
const se_ListDelegatedAdministratorsCommand = async (input, context) => {
    const headers = sharedHeaders("ListDelegatedAdministrators");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListDelegatedAdministratorsCommand = se_ListDelegatedAdministratorsCommand;
const se_ListDelegatedServicesForAccountCommand = async (input, context) => {
    const headers = sharedHeaders("ListDelegatedServicesForAccount");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListDelegatedServicesForAccountCommand = se_ListDelegatedServicesForAccountCommand;
const se_ListHandshakesForAccountCommand = async (input, context) => {
    const headers = sharedHeaders("ListHandshakesForAccount");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListHandshakesForAccountCommand = se_ListHandshakesForAccountCommand;
const se_ListHandshakesForOrganizationCommand = async (input, context) => {
    const headers = sharedHeaders("ListHandshakesForOrganization");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListHandshakesForOrganizationCommand = se_ListHandshakesForOrganizationCommand;
const se_ListOrganizationalUnitsForParentCommand = async (input, context) => {
    const headers = sharedHeaders("ListOrganizationalUnitsForParent");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListOrganizationalUnitsForParentCommand = se_ListOrganizationalUnitsForParentCommand;
const se_ListParentsCommand = async (input, context) => {
    const headers = sharedHeaders("ListParents");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListParentsCommand = se_ListParentsCommand;
const se_ListPoliciesCommand = async (input, context) => {
    const headers = sharedHeaders("ListPolicies");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListPoliciesCommand = se_ListPoliciesCommand;
const se_ListPoliciesForTargetCommand = async (input, context) => {
    const headers = sharedHeaders("ListPoliciesForTarget");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListPoliciesForTargetCommand = se_ListPoliciesForTargetCommand;
const se_ListRootsCommand = async (input, context) => {
    const headers = sharedHeaders("ListRoots");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListRootsCommand = se_ListRootsCommand;
const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListTagsForResourceCommand = se_ListTagsForResourceCommand;
const se_ListTargetsForPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("ListTargetsForPolicy");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListTargetsForPolicyCommand = se_ListTargetsForPolicyCommand;
const se_MoveAccountCommand = async (input, context) => {
    const headers = sharedHeaders("MoveAccount");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_MoveAccountCommand = se_MoveAccountCommand;
const se_PutResourcePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("PutResourcePolicy");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutResourcePolicyCommand = se_PutResourcePolicyCommand;
const se_RegisterDelegatedAdministratorCommand = async (input, context) => {
    const headers = sharedHeaders("RegisterDelegatedAdministrator");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_RegisterDelegatedAdministratorCommand = se_RegisterDelegatedAdministratorCommand;
const se_RemoveAccountFromOrganizationCommand = async (input, context) => {
    const headers = sharedHeaders("RemoveAccountFromOrganization");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_RemoveAccountFromOrganizationCommand = se_RemoveAccountFromOrganizationCommand;
const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_TagResourceCommand = se_TagResourceCommand;
const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UntagResourceCommand = se_UntagResourceCommand;
const se_UpdateOrganizationalUnitCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateOrganizationalUnit");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateOrganizationalUnitCommand = se_UpdateOrganizationalUnitCommand;
const se_UpdatePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("UpdatePolicy");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdatePolicyCommand = se_UpdatePolicyCommand;
const de_AcceptHandshakeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AcceptHandshakeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AcceptHandshakeResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_AcceptHandshakeCommand = de_AcceptHandshakeCommand;
const de_AcceptHandshakeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccessDeniedForDependencyException":
        case "com.amazonaws.organizations#AccessDeniedForDependencyException":
            throw await de_AccessDeniedForDependencyExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.organizations#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "HandshakeAlreadyInStateException":
        case "com.amazonaws.organizations#HandshakeAlreadyInStateException":
            throw await de_HandshakeAlreadyInStateExceptionRes(parsedOutput, context);
        case "HandshakeConstraintViolationException":
        case "com.amazonaws.organizations#HandshakeConstraintViolationException":
            throw await de_HandshakeConstraintViolationExceptionRes(parsedOutput, context);
        case "HandshakeNotFoundException":
        case "com.amazonaws.organizations#HandshakeNotFoundException":
            throw await de_HandshakeNotFoundExceptionRes(parsedOutput, context);
        case "InvalidHandshakeTransitionException":
        case "com.amazonaws.organizations#InvalidHandshakeTransitionException":
            throw await de_InvalidHandshakeTransitionExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AttachPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AttachPolicyCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_AttachPolicyCommand = de_AttachPolicyCommand;
const de_AttachPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.organizations#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "ConstraintViolationException":
        case "com.amazonaws.organizations#ConstraintViolationException":
            throw await de_ConstraintViolationExceptionRes(parsedOutput, context);
        case "DuplicatePolicyAttachmentException":
        case "com.amazonaws.organizations#DuplicatePolicyAttachmentException":
            throw await de_DuplicatePolicyAttachmentExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "PolicyChangesInProgressException":
        case "com.amazonaws.organizations#PolicyChangesInProgressException":
            throw await de_PolicyChangesInProgressExceptionRes(parsedOutput, context);
        case "PolicyNotFoundException":
        case "com.amazonaws.organizations#PolicyNotFoundException":
            throw await de_PolicyNotFoundExceptionRes(parsedOutput, context);
        case "PolicyTypeNotEnabledException":
        case "com.amazonaws.organizations#PolicyTypeNotEnabledException":
            throw await de_PolicyTypeNotEnabledExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TargetNotFoundException":
        case "com.amazonaws.organizations#TargetNotFoundException":
            throw await de_TargetNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnsupportedAPIEndpointException":
        case "com.amazonaws.organizations#UnsupportedAPIEndpointException":
            throw await de_UnsupportedAPIEndpointExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CancelHandshakeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CancelHandshakeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CancelHandshakeResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CancelHandshakeCommand = de_CancelHandshakeCommand;
const de_CancelHandshakeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.organizations#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "HandshakeAlreadyInStateException":
        case "com.amazonaws.organizations#HandshakeAlreadyInStateException":
            throw await de_HandshakeAlreadyInStateExceptionRes(parsedOutput, context);
        case "HandshakeNotFoundException":
        case "com.amazonaws.organizations#HandshakeNotFoundException":
            throw await de_HandshakeNotFoundExceptionRes(parsedOutput, context);
        case "InvalidHandshakeTransitionException":
        case "com.amazonaws.organizations#InvalidHandshakeTransitionException":
            throw await de_InvalidHandshakeTransitionExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CloseAccountCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CloseAccountCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_CloseAccountCommand = de_CloseAccountCommand;
const de_CloseAccountCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountAlreadyClosedException":
        case "com.amazonaws.organizations#AccountAlreadyClosedException":
            throw await de_AccountAlreadyClosedExceptionRes(parsedOutput, context);
        case "AccountNotFoundException":
        case "com.amazonaws.organizations#AccountNotFoundException":
            throw await de_AccountNotFoundExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.organizations#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.organizations#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ConstraintViolationException":
        case "com.amazonaws.organizations#ConstraintViolationException":
            throw await de_ConstraintViolationExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnsupportedAPIEndpointException":
        case "com.amazonaws.organizations#UnsupportedAPIEndpointException":
            throw await de_UnsupportedAPIEndpointExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateAccountCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateAccountCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateAccountResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateAccountCommand = de_CreateAccountCommand;
const de_CreateAccountCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.organizations#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "ConstraintViolationException":
        case "com.amazonaws.organizations#ConstraintViolationException":
            throw await de_ConstraintViolationExceptionRes(parsedOutput, context);
        case "FinalizingOrganizationException":
        case "com.amazonaws.organizations#FinalizingOrganizationException":
            throw await de_FinalizingOrganizationExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnsupportedAPIEndpointException":
        case "com.amazonaws.organizations#UnsupportedAPIEndpointException":
            throw await de_UnsupportedAPIEndpointExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateGovCloudAccountCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateGovCloudAccountCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateGovCloudAccountResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateGovCloudAccountCommand = de_CreateGovCloudAccountCommand;
const de_CreateGovCloudAccountCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.organizations#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "ConstraintViolationException":
        case "com.amazonaws.organizations#ConstraintViolationException":
            throw await de_ConstraintViolationExceptionRes(parsedOutput, context);
        case "FinalizingOrganizationException":
        case "com.amazonaws.organizations#FinalizingOrganizationException":
            throw await de_FinalizingOrganizationExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnsupportedAPIEndpointException":
        case "com.amazonaws.organizations#UnsupportedAPIEndpointException":
            throw await de_UnsupportedAPIEndpointExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateOrganizationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateOrganizationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateOrganizationCommand = de_CreateOrganizationCommand;
const de_CreateOrganizationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccessDeniedForDependencyException":
        case "com.amazonaws.organizations#AccessDeniedForDependencyException":
            throw await de_AccessDeniedForDependencyExceptionRes(parsedOutput, context);
        case "AlreadyInOrganizationException":
        case "com.amazonaws.organizations#AlreadyInOrganizationException":
            throw await de_AlreadyInOrganizationExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.organizations#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "ConstraintViolationException":
        case "com.amazonaws.organizations#ConstraintViolationException":
            throw await de_ConstraintViolationExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateOrganizationalUnitCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateOrganizationalUnitCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateOrganizationalUnitCommand = de_CreateOrganizationalUnitCommand;
const de_CreateOrganizationalUnitCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.organizations#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "ConstraintViolationException":
        case "com.amazonaws.organizations#ConstraintViolationException":
            throw await de_ConstraintViolationExceptionRes(parsedOutput, context);
        case "DuplicateOrganizationalUnitException":
        case "com.amazonaws.organizations#DuplicateOrganizationalUnitException":
            throw await de_DuplicateOrganizationalUnitExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ParentNotFoundException":
        case "com.amazonaws.organizations#ParentNotFoundException":
            throw await de_ParentNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreatePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreatePolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreatePolicyCommand = de_CreatePolicyCommand;
const de_CreatePolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.organizations#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "ConstraintViolationException":
        case "com.amazonaws.organizations#ConstraintViolationException":
            throw await de_ConstraintViolationExceptionRes(parsedOutput, context);
        case "DuplicatePolicyException":
        case "com.amazonaws.organizations#DuplicatePolicyException":
            throw await de_DuplicatePolicyExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "MalformedPolicyDocumentException":
        case "com.amazonaws.organizations#MalformedPolicyDocumentException":
            throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
        case "PolicyTypeNotAvailableForOrganizationException":
        case "com.amazonaws.organizations#PolicyTypeNotAvailableForOrganizationException":
            throw await de_PolicyTypeNotAvailableForOrganizationExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnsupportedAPIEndpointException":
        case "com.amazonaws.organizations#UnsupportedAPIEndpointException":
            throw await de_UnsupportedAPIEndpointExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeclineHandshakeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeclineHandshakeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeclineHandshakeResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeclineHandshakeCommand = de_DeclineHandshakeCommand;
const de_DeclineHandshakeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.organizations#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "HandshakeAlreadyInStateException":
        case "com.amazonaws.organizations#HandshakeAlreadyInStateException":
            throw await de_HandshakeAlreadyInStateExceptionRes(parsedOutput, context);
        case "HandshakeNotFoundException":
        case "com.amazonaws.organizations#HandshakeNotFoundException":
            throw await de_HandshakeNotFoundExceptionRes(parsedOutput, context);
        case "InvalidHandshakeTransitionException":
        case "com.amazonaws.organizations#InvalidHandshakeTransitionException":
            throw await de_InvalidHandshakeTransitionExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteOrganizationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteOrganizationCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_DeleteOrganizationCommand = de_DeleteOrganizationCommand;
const de_DeleteOrganizationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.organizations#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OrganizationNotEmptyException":
        case "com.amazonaws.organizations#OrganizationNotEmptyException":
            throw await de_OrganizationNotEmptyExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteOrganizationalUnitCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteOrganizationalUnitCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_DeleteOrganizationalUnitCommand = de_DeleteOrganizationalUnitCommand;
const de_DeleteOrganizationalUnitCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.organizations#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OrganizationalUnitNotEmptyException":
        case "com.amazonaws.organizations#OrganizationalUnitNotEmptyException":
            throw await de_OrganizationalUnitNotEmptyExceptionRes(parsedOutput, context);
        case "OrganizationalUnitNotFoundException":
        case "com.amazonaws.organizations#OrganizationalUnitNotFoundException":
            throw await de_OrganizationalUnitNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeletePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeletePolicyCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_DeletePolicyCommand = de_DeletePolicyCommand;
const de_DeletePolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.organizations#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "PolicyInUseException":
        case "com.amazonaws.organizations#PolicyInUseException":
            throw await de_PolicyInUseExceptionRes(parsedOutput, context);
        case "PolicyNotFoundException":
        case "com.amazonaws.organizations#PolicyNotFoundException":
            throw await de_PolicyNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnsupportedAPIEndpointException":
        case "com.amazonaws.organizations#UnsupportedAPIEndpointException":
            throw await de_UnsupportedAPIEndpointExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteResourcePolicyCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_DeleteResourcePolicyCommand = de_DeleteResourcePolicyCommand;
const de_DeleteResourcePolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.organizations#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "ConstraintViolationException":
        case "com.amazonaws.organizations#ConstraintViolationException":
            throw await de_ConstraintViolationExceptionRes(parsedOutput, context);
        case "ResourcePolicyNotFoundException":
        case "com.amazonaws.organizations#ResourcePolicyNotFoundException":
            throw await de_ResourcePolicyNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnsupportedAPIEndpointException":
        case "com.amazonaws.organizations#UnsupportedAPIEndpointException":
            throw await de_UnsupportedAPIEndpointExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeregisterDelegatedAdministratorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeregisterDelegatedAdministratorCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_DeregisterDelegatedAdministratorCommand = de_DeregisterDelegatedAdministratorCommand;
const de_DeregisterDelegatedAdministratorCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountNotFoundException":
        case "com.amazonaws.organizations#AccountNotFoundException":
            throw await de_AccountNotFoundExceptionRes(parsedOutput, context);
        case "AccountNotRegisteredException":
        case "com.amazonaws.organizations#AccountNotRegisteredException":
            throw await de_AccountNotRegisteredExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.organizations#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "ConstraintViolationException":
        case "com.amazonaws.organizations#ConstraintViolationException":
            throw await de_ConstraintViolationExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnsupportedAPIEndpointException":
        case "com.amazonaws.organizations#UnsupportedAPIEndpointException":
            throw await de_UnsupportedAPIEndpointExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeAccountCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeAccountCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeAccountResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeAccountCommand = de_DescribeAccountCommand;
const de_DescribeAccountCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountNotFoundException":
        case "com.amazonaws.organizations#AccountNotFoundException":
            throw await de_AccountNotFoundExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeCreateAccountStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeCreateAccountStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeCreateAccountStatusResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeCreateAccountStatusCommand = de_DescribeCreateAccountStatusCommand;
const de_DescribeCreateAccountStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "CreateAccountStatusNotFoundException":
        case "com.amazonaws.organizations#CreateAccountStatusNotFoundException":
            throw await de_CreateAccountStatusNotFoundExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnsupportedAPIEndpointException":
        case "com.amazonaws.organizations#UnsupportedAPIEndpointException":
            throw await de_UnsupportedAPIEndpointExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeEffectivePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeEffectivePolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeEffectivePolicyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeEffectivePolicyCommand = de_DescribeEffectivePolicyCommand;
const de_DescribeEffectivePolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConstraintViolationException":
        case "com.amazonaws.organizations#ConstraintViolationException":
            throw await de_ConstraintViolationExceptionRes(parsedOutput, context);
        case "EffectivePolicyNotFoundException":
        case "com.amazonaws.organizations#EffectivePolicyNotFoundException":
            throw await de_EffectivePolicyNotFoundExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TargetNotFoundException":
        case "com.amazonaws.organizations#TargetNotFoundException":
            throw await de_TargetNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnsupportedAPIEndpointException":
        case "com.amazonaws.organizations#UnsupportedAPIEndpointException":
            throw await de_UnsupportedAPIEndpointExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeHandshakeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeHandshakeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeHandshakeResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeHandshakeCommand = de_DescribeHandshakeCommand;
const de_DescribeHandshakeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.organizations#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "HandshakeNotFoundException":
        case "com.amazonaws.organizations#HandshakeNotFoundException":
            throw await de_HandshakeNotFoundExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeOrganizationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeOrganizationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeOrganizationCommand = de_DescribeOrganizationCommand;
const de_DescribeOrganizationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.organizations#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeOrganizationalUnitCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeOrganizationalUnitCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeOrganizationalUnitCommand = de_DescribeOrganizationalUnitCommand;
const de_DescribeOrganizationalUnitCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OrganizationalUnitNotFoundException":
        case "com.amazonaws.organizations#OrganizationalUnitNotFoundException":
            throw await de_OrganizationalUnitNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribePolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribePolicyCommand = de_DescribePolicyCommand;
const de_DescribePolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "PolicyNotFoundException":
        case "com.amazonaws.organizations#PolicyNotFoundException":
            throw await de_PolicyNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnsupportedAPIEndpointException":
        case "com.amazonaws.organizations#UnsupportedAPIEndpointException":
            throw await de_UnsupportedAPIEndpointExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeResourcePolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeResourcePolicyCommand = de_DescribeResourcePolicyCommand;
const de_DescribeResourcePolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConstraintViolationException":
        case "com.amazonaws.organizations#ConstraintViolationException":
            throw await de_ConstraintViolationExceptionRes(parsedOutput, context);
        case "ResourcePolicyNotFoundException":
        case "com.amazonaws.organizations#ResourcePolicyNotFoundException":
            throw await de_ResourcePolicyNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnsupportedAPIEndpointException":
        case "com.amazonaws.organizations#UnsupportedAPIEndpointException":
            throw await de_UnsupportedAPIEndpointExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DetachPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DetachPolicyCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_DetachPolicyCommand = de_DetachPolicyCommand;
const de_DetachPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.organizations#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "ConstraintViolationException":
        case "com.amazonaws.organizations#ConstraintViolationException":
            throw await de_ConstraintViolationExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "PolicyChangesInProgressException":
        case "com.amazonaws.organizations#PolicyChangesInProgressException":
            throw await de_PolicyChangesInProgressExceptionRes(parsedOutput, context);
        case "PolicyNotAttachedException":
        case "com.amazonaws.organizations#PolicyNotAttachedException":
            throw await de_PolicyNotAttachedExceptionRes(parsedOutput, context);
        case "PolicyNotFoundException":
        case "com.amazonaws.organizations#PolicyNotFoundException":
            throw await de_PolicyNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TargetNotFoundException":
        case "com.amazonaws.organizations#TargetNotFoundException":
            throw await de_TargetNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnsupportedAPIEndpointException":
        case "com.amazonaws.organizations#UnsupportedAPIEndpointException":
            throw await de_UnsupportedAPIEndpointExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DisableAWSServiceAccessCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DisableAWSServiceAccessCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_DisableAWSServiceAccessCommand = de_DisableAWSServiceAccessCommand;
const de_DisableAWSServiceAccessCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.organizations#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "ConstraintViolationException":
        case "com.amazonaws.organizations#ConstraintViolationException":
            throw await de_ConstraintViolationExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnsupportedAPIEndpointException":
        case "com.amazonaws.organizations#UnsupportedAPIEndpointException":
            throw await de_UnsupportedAPIEndpointExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DisablePolicyTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DisablePolicyTypeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DisablePolicyTypeCommand = de_DisablePolicyTypeCommand;
const de_DisablePolicyTypeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.organizations#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "ConstraintViolationException":
        case "com.amazonaws.organizations#ConstraintViolationException":
            throw await de_ConstraintViolationExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "PolicyChangesInProgressException":
        case "com.amazonaws.organizations#PolicyChangesInProgressException":
            throw await de_PolicyChangesInProgressExceptionRes(parsedOutput, context);
        case "PolicyTypeNotEnabledException":
        case "com.amazonaws.organizations#PolicyTypeNotEnabledException":
            throw await de_PolicyTypeNotEnabledExceptionRes(parsedOutput, context);
        case "RootNotFoundException":
        case "com.amazonaws.organizations#RootNotFoundException":
            throw await de_RootNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnsupportedAPIEndpointException":
        case "com.amazonaws.organizations#UnsupportedAPIEndpointException":
            throw await de_UnsupportedAPIEndpointExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_EnableAllFeaturesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_EnableAllFeaturesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_EnableAllFeaturesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_EnableAllFeaturesCommand = de_EnableAllFeaturesCommand;
const de_EnableAllFeaturesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.organizations#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "HandshakeConstraintViolationException":
        case "com.amazonaws.organizations#HandshakeConstraintViolationException":
            throw await de_HandshakeConstraintViolationExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_EnableAWSServiceAccessCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_EnableAWSServiceAccessCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_EnableAWSServiceAccessCommand = de_EnableAWSServiceAccessCommand;
const de_EnableAWSServiceAccessCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.organizations#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "ConstraintViolationException":
        case "com.amazonaws.organizations#ConstraintViolationException":
            throw await de_ConstraintViolationExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnsupportedAPIEndpointException":
        case "com.amazonaws.organizations#UnsupportedAPIEndpointException":
            throw await de_UnsupportedAPIEndpointExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_EnablePolicyTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_EnablePolicyTypeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_EnablePolicyTypeCommand = de_EnablePolicyTypeCommand;
const de_EnablePolicyTypeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.organizations#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "ConstraintViolationException":
        case "com.amazonaws.organizations#ConstraintViolationException":
            throw await de_ConstraintViolationExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "PolicyChangesInProgressException":
        case "com.amazonaws.organizations#PolicyChangesInProgressException":
            throw await de_PolicyChangesInProgressExceptionRes(parsedOutput, context);
        case "PolicyTypeAlreadyEnabledException":
        case "com.amazonaws.organizations#PolicyTypeAlreadyEnabledException":
            throw await de_PolicyTypeAlreadyEnabledExceptionRes(parsedOutput, context);
        case "PolicyTypeNotAvailableForOrganizationException":
        case "com.amazonaws.organizations#PolicyTypeNotAvailableForOrganizationException":
            throw await de_PolicyTypeNotAvailableForOrganizationExceptionRes(parsedOutput, context);
        case "RootNotFoundException":
        case "com.amazonaws.organizations#RootNotFoundException":
            throw await de_RootNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnsupportedAPIEndpointException":
        case "com.amazonaws.organizations#UnsupportedAPIEndpointException":
            throw await de_UnsupportedAPIEndpointExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_InviteAccountToOrganizationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_InviteAccountToOrganizationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_InviteAccountToOrganizationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_InviteAccountToOrganizationCommand = de_InviteAccountToOrganizationCommand;
const de_InviteAccountToOrganizationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountOwnerNotVerifiedException":
        case "com.amazonaws.organizations#AccountOwnerNotVerifiedException":
            throw await de_AccountOwnerNotVerifiedExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.organizations#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "ConstraintViolationException":
        case "com.amazonaws.organizations#ConstraintViolationException":
            throw await de_ConstraintViolationExceptionRes(parsedOutput, context);
        case "DuplicateHandshakeException":
        case "com.amazonaws.organizations#DuplicateHandshakeException":
            throw await de_DuplicateHandshakeExceptionRes(parsedOutput, context);
        case "FinalizingOrganizationException":
        case "com.amazonaws.organizations#FinalizingOrganizationException":
            throw await de_FinalizingOrganizationExceptionRes(parsedOutput, context);
        case "HandshakeConstraintViolationException":
        case "com.amazonaws.organizations#HandshakeConstraintViolationException":
            throw await de_HandshakeConstraintViolationExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_LeaveOrganizationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_LeaveOrganizationCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_LeaveOrganizationCommand = de_LeaveOrganizationCommand;
const de_LeaveOrganizationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountNotFoundException":
        case "com.amazonaws.organizations#AccountNotFoundException":
            throw await de_AccountNotFoundExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.organizations#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "ConstraintViolationException":
        case "com.amazonaws.organizations#ConstraintViolationException":
            throw await de_ConstraintViolationExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "MasterCannotLeaveOrganizationException":
        case "com.amazonaws.organizations#MasterCannotLeaveOrganizationException":
            throw await de_MasterCannotLeaveOrganizationExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListAccountsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListAccountsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListAccountsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListAccountsCommand = de_ListAccountsCommand;
const de_ListAccountsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListAccountsForParentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListAccountsForParentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListAccountsForParentResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListAccountsForParentCommand = de_ListAccountsForParentCommand;
const de_ListAccountsForParentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ParentNotFoundException":
        case "com.amazonaws.organizations#ParentNotFoundException":
            throw await de_ParentNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListAWSServiceAccessForOrganizationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListAWSServiceAccessForOrganizationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListAWSServiceAccessForOrganizationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListAWSServiceAccessForOrganizationCommand = de_ListAWSServiceAccessForOrganizationCommand;
const de_ListAWSServiceAccessForOrganizationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConstraintViolationException":
        case "com.amazonaws.organizations#ConstraintViolationException":
            throw await de_ConstraintViolationExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnsupportedAPIEndpointException":
        case "com.amazonaws.organizations#UnsupportedAPIEndpointException":
            throw await de_UnsupportedAPIEndpointExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListChildrenCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListChildrenCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListChildrenCommand = de_ListChildrenCommand;
const de_ListChildrenCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ParentNotFoundException":
        case "com.amazonaws.organizations#ParentNotFoundException":
            throw await de_ParentNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListCreateAccountStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListCreateAccountStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListCreateAccountStatusResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListCreateAccountStatusCommand = de_ListCreateAccountStatusCommand;
const de_ListCreateAccountStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnsupportedAPIEndpointException":
        case "com.amazonaws.organizations#UnsupportedAPIEndpointException":
            throw await de_UnsupportedAPIEndpointExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListDelegatedAdministratorsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListDelegatedAdministratorsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListDelegatedAdministratorsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListDelegatedAdministratorsCommand = de_ListDelegatedAdministratorsCommand;
const de_ListDelegatedAdministratorsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConstraintViolationException":
        case "com.amazonaws.organizations#ConstraintViolationException":
            throw await de_ConstraintViolationExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnsupportedAPIEndpointException":
        case "com.amazonaws.organizations#UnsupportedAPIEndpointException":
            throw await de_UnsupportedAPIEndpointExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListDelegatedServicesForAccountCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListDelegatedServicesForAccountCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListDelegatedServicesForAccountResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListDelegatedServicesForAccountCommand = de_ListDelegatedServicesForAccountCommand;
const de_ListDelegatedServicesForAccountCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountNotFoundException":
        case "com.amazonaws.organizations#AccountNotFoundException":
            throw await de_AccountNotFoundExceptionRes(parsedOutput, context);
        case "AccountNotRegisteredException":
        case "com.amazonaws.organizations#AccountNotRegisteredException":
            throw await de_AccountNotRegisteredExceptionRes(parsedOutput, context);
        case "ConstraintViolationException":
        case "com.amazonaws.organizations#ConstraintViolationException":
            throw await de_ConstraintViolationExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnsupportedAPIEndpointException":
        case "com.amazonaws.organizations#UnsupportedAPIEndpointException":
            throw await de_UnsupportedAPIEndpointExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListHandshakesForAccountCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListHandshakesForAccountCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListHandshakesForAccountResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListHandshakesForAccountCommand = de_ListHandshakesForAccountCommand;
const de_ListHandshakesForAccountCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.organizations#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListHandshakesForOrganizationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListHandshakesForOrganizationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListHandshakesForOrganizationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListHandshakesForOrganizationCommand = de_ListHandshakesForOrganizationCommand;
const de_ListHandshakesForOrganizationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.organizations#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListOrganizationalUnitsForParentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListOrganizationalUnitsForParentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListOrganizationalUnitsForParentCommand = de_ListOrganizationalUnitsForParentCommand;
const de_ListOrganizationalUnitsForParentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ParentNotFoundException":
        case "com.amazonaws.organizations#ParentNotFoundException":
            throw await de_ParentNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListParentsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListParentsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListParentsCommand = de_ListParentsCommand;
const de_ListParentsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ChildNotFoundException":
        case "com.amazonaws.organizations#ChildNotFoundException":
            throw await de_ChildNotFoundExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListPoliciesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListPoliciesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListPoliciesCommand = de_ListPoliciesCommand;
const de_ListPoliciesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnsupportedAPIEndpointException":
        case "com.amazonaws.organizations#UnsupportedAPIEndpointException":
            throw await de_UnsupportedAPIEndpointExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListPoliciesForTargetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListPoliciesForTargetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListPoliciesForTargetCommand = de_ListPoliciesForTargetCommand;
const de_ListPoliciesForTargetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TargetNotFoundException":
        case "com.amazonaws.organizations#TargetNotFoundException":
            throw await de_TargetNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnsupportedAPIEndpointException":
        case "com.amazonaws.organizations#UnsupportedAPIEndpointException":
            throw await de_UnsupportedAPIEndpointExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListRootsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListRootsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListRootsCommand = de_ListRootsCommand;
const de_ListRootsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListTagsForResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListTagsForResourceCommand = de_ListTagsForResourceCommand;
const de_ListTagsForResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TargetNotFoundException":
        case "com.amazonaws.organizations#TargetNotFoundException":
            throw await de_TargetNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListTargetsForPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListTargetsForPolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListTargetsForPolicyCommand = de_ListTargetsForPolicyCommand;
const de_ListTargetsForPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "PolicyNotFoundException":
        case "com.amazonaws.organizations#PolicyNotFoundException":
            throw await de_PolicyNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnsupportedAPIEndpointException":
        case "com.amazonaws.organizations#UnsupportedAPIEndpointException":
            throw await de_UnsupportedAPIEndpointExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_MoveAccountCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_MoveAccountCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_MoveAccountCommand = de_MoveAccountCommand;
const de_MoveAccountCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountNotFoundException":
        case "com.amazonaws.organizations#AccountNotFoundException":
            throw await de_AccountNotFoundExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.organizations#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "DestinationParentNotFoundException":
        case "com.amazonaws.organizations#DestinationParentNotFoundException":
            throw await de_DestinationParentNotFoundExceptionRes(parsedOutput, context);
        case "DuplicateAccountException":
        case "com.amazonaws.organizations#DuplicateAccountException":
            throw await de_DuplicateAccountExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "SourceParentNotFoundException":
        case "com.amazonaws.organizations#SourceParentNotFoundException":
            throw await de_SourceParentNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_PutResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutResourcePolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_PutResourcePolicyCommand = de_PutResourcePolicyCommand;
const de_PutResourcePolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.organizations#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "ConstraintViolationException":
        case "com.amazonaws.organizations#ConstraintViolationException":
            throw await de_ConstraintViolationExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnsupportedAPIEndpointException":
        case "com.amazonaws.organizations#UnsupportedAPIEndpointException":
            throw await de_UnsupportedAPIEndpointExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_RegisterDelegatedAdministratorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RegisterDelegatedAdministratorCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_RegisterDelegatedAdministratorCommand = de_RegisterDelegatedAdministratorCommand;
const de_RegisterDelegatedAdministratorCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountAlreadyRegisteredException":
        case "com.amazonaws.organizations#AccountAlreadyRegisteredException":
            throw await de_AccountAlreadyRegisteredExceptionRes(parsedOutput, context);
        case "AccountNotFoundException":
        case "com.amazonaws.organizations#AccountNotFoundException":
            throw await de_AccountNotFoundExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.organizations#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "ConstraintViolationException":
        case "com.amazonaws.organizations#ConstraintViolationException":
            throw await de_ConstraintViolationExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnsupportedAPIEndpointException":
        case "com.amazonaws.organizations#UnsupportedAPIEndpointException":
            throw await de_UnsupportedAPIEndpointExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_RemoveAccountFromOrganizationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RemoveAccountFromOrganizationCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_RemoveAccountFromOrganizationCommand = de_RemoveAccountFromOrganizationCommand;
const de_RemoveAccountFromOrganizationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountNotFoundException":
        case "com.amazonaws.organizations#AccountNotFoundException":
            throw await de_AccountNotFoundExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.organizations#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "ConstraintViolationException":
        case "com.amazonaws.organizations#ConstraintViolationException":
            throw await de_ConstraintViolationExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "MasterCannotLeaveOrganizationException":
        case "com.amazonaws.organizations#MasterCannotLeaveOrganizationException":
            throw await de_MasterCannotLeaveOrganizationExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_TagResourceCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_TagResourceCommand = de_TagResourceCommand;
const de_TagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.organizations#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "ConstraintViolationException":
        case "com.amazonaws.organizations#ConstraintViolationException":
            throw await de_ConstraintViolationExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TargetNotFoundException":
        case "com.amazonaws.organizations#TargetNotFoundException":
            throw await de_TargetNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UntagResourceCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_UntagResourceCommand = de_UntagResourceCommand;
const de_UntagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.organizations#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "ConstraintViolationException":
        case "com.amazonaws.organizations#ConstraintViolationException":
            throw await de_ConstraintViolationExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TargetNotFoundException":
        case "com.amazonaws.organizations#TargetNotFoundException":
            throw await de_TargetNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateOrganizationalUnitCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateOrganizationalUnitCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UpdateOrganizationalUnitCommand = de_UpdateOrganizationalUnitCommand;
const de_UpdateOrganizationalUnitCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.organizations#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "DuplicateOrganizationalUnitException":
        case "com.amazonaws.organizations#DuplicateOrganizationalUnitException":
            throw await de_DuplicateOrganizationalUnitExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OrganizationalUnitNotFoundException":
        case "com.amazonaws.organizations#OrganizationalUnitNotFoundException":
            throw await de_OrganizationalUnitNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdatePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdatePolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UpdatePolicyCommand = de_UpdatePolicyCommand;
const de_UpdatePolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSOrganizationsNotInUseException":
        case "com.amazonaws.organizations#AWSOrganizationsNotInUseException":
            throw await de_AWSOrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.organizations#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.organizations#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "ConstraintViolationException":
        case "com.amazonaws.organizations#ConstraintViolationException":
            throw await de_ConstraintViolationExceptionRes(parsedOutput, context);
        case "DuplicatePolicyException":
        case "com.amazonaws.organizations#DuplicatePolicyException":
            throw await de_DuplicatePolicyExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.organizations#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "MalformedPolicyDocumentException":
        case "com.amazonaws.organizations#MalformedPolicyDocumentException":
            throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
        case "PolicyChangesInProgressException":
        case "com.amazonaws.organizations#PolicyChangesInProgressException":
            throw await de_PolicyChangesInProgressExceptionRes(parsedOutput, context);
        case "PolicyNotFoundException":
        case "com.amazonaws.organizations#PolicyNotFoundException":
            throw await de_PolicyNotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.organizations#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.organizations#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnsupportedAPIEndpointException":
        case "com.amazonaws.organizations#UnsupportedAPIEndpointException":
            throw await de_UnsupportedAPIEndpointExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_AccessDeniedForDependencyExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.AccessDeniedForDependencyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_AccountAlreadyClosedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.AccountAlreadyClosedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_AccountAlreadyRegisteredExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.AccountAlreadyRegisteredException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_AccountNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.AccountNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_AccountNotRegisteredExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.AccountNotRegisteredException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_AccountOwnerNotVerifiedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.AccountOwnerNotVerifiedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_AlreadyInOrganizationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.AlreadyInOrganizationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_AWSOrganizationsNotInUseExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.AWSOrganizationsNotInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ChildNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ChildNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ConcurrentModificationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ConcurrentModificationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ConstraintViolationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ConstraintViolationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_CreateAccountStatusNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.CreateAccountStatusNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DestinationParentNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.DestinationParentNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DuplicateAccountExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.DuplicateAccountException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DuplicateHandshakeExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.DuplicateHandshakeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DuplicateOrganizationalUnitExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.DuplicateOrganizationalUnitException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DuplicatePolicyAttachmentExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.DuplicatePolicyAttachmentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DuplicatePolicyExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.DuplicatePolicyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_EffectivePolicyNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.EffectivePolicyNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_FinalizingOrganizationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.FinalizingOrganizationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_HandshakeAlreadyInStateExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.HandshakeAlreadyInStateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_HandshakeConstraintViolationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.HandshakeConstraintViolationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_HandshakeNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.HandshakeNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidHandshakeTransitionExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidHandshakeTransitionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidInputExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidInputException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_MalformedPolicyDocumentExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.MalformedPolicyDocumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_MasterCannotLeaveOrganizationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.MasterCannotLeaveOrganizationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_OrganizationalUnitNotEmptyExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.OrganizationalUnitNotEmptyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_OrganizationalUnitNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.OrganizationalUnitNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_OrganizationNotEmptyExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.OrganizationNotEmptyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ParentNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ParentNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_PolicyChangesInProgressExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.PolicyChangesInProgressException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_PolicyInUseExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.PolicyInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_PolicyNotAttachedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.PolicyNotAttachedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_PolicyNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.PolicyNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_PolicyTypeAlreadyEnabledExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.PolicyTypeAlreadyEnabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_PolicyTypeNotAvailableForOrganizationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.PolicyTypeNotAvailableForOrganizationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_PolicyTypeNotEnabledExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.PolicyTypeNotEnabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ResourcePolicyNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ResourcePolicyNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_RootNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.RootNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ServiceExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ServiceException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_SourceParentNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.SourceParentNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_TargetNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.TargetNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_TooManyRequestsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_UnsupportedAPIEndpointExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.UnsupportedAPIEndpointException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_AcceptHandshakeResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Handshake: (_) => de_Handshake(_, context),
    });
};
const de_Account = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Arn: smithy_client_1.expectString,
        Email: smithy_client_1.expectString,
        Id: smithy_client_1.expectString,
        JoinedMethod: smithy_client_1.expectString,
        JoinedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Name: smithy_client_1.expectString,
        Status: smithy_client_1.expectString,
    });
};
const de_Accounts = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Account(entry, context);
    });
    return retVal;
};
const de_CancelHandshakeResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Handshake: (_) => de_Handshake(_, context),
    });
};
const de_CreateAccountResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CreateAccountStatus: (_) => de_CreateAccountStatus(_, context),
    });
};
const de_CreateAccountStatus = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AccountId: smithy_client_1.expectString,
        AccountName: smithy_client_1.expectString,
        CompletedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        FailureReason: smithy_client_1.expectString,
        GovCloudAccountId: smithy_client_1.expectString,
        Id: smithy_client_1.expectString,
        RequestedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        State: smithy_client_1.expectString,
    });
};
const de_CreateAccountStatuses = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CreateAccountStatus(entry, context);
    });
    return retVal;
};
const de_CreateGovCloudAccountResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CreateAccountStatus: (_) => de_CreateAccountStatus(_, context),
    });
};
const de_DeclineHandshakeResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Handshake: (_) => de_Handshake(_, context),
    });
};
const de_DelegatedAdministrator = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Arn: smithy_client_1.expectString,
        DelegationEnabledDate: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Email: smithy_client_1.expectString,
        Id: smithy_client_1.expectString,
        JoinedMethod: smithy_client_1.expectString,
        JoinedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Name: smithy_client_1.expectString,
        Status: smithy_client_1.expectString,
    });
};
const de_DelegatedAdministrators = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DelegatedAdministrator(entry, context);
    });
    return retVal;
};
const de_DelegatedService = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        DelegationEnabledDate: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ServicePrincipal: smithy_client_1.expectString,
    });
};
const de_DelegatedServices = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DelegatedService(entry, context);
    });
    return retVal;
};
const de_DescribeAccountResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Account: (_) => de_Account(_, context),
    });
};
const de_DescribeCreateAccountStatusResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CreateAccountStatus: (_) => de_CreateAccountStatus(_, context),
    });
};
const de_DescribeEffectivePolicyResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        EffectivePolicy: (_) => de_EffectivePolicy(_, context),
    });
};
const de_DescribeHandshakeResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Handshake: (_) => de_Handshake(_, context),
    });
};
const de_EffectivePolicy = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        LastUpdatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        PolicyContent: smithy_client_1.expectString,
        PolicyType: smithy_client_1.expectString,
        TargetId: smithy_client_1.expectString,
    });
};
const de_EnableAllFeaturesResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Handshake: (_) => de_Handshake(_, context),
    });
};
const de_EnabledServicePrincipal = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        DateEnabled: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ServicePrincipal: smithy_client_1.expectString,
    });
};
const de_EnabledServicePrincipals = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EnabledServicePrincipal(entry, context);
    });
    return retVal;
};
const de_Handshake = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Action: smithy_client_1.expectString,
        Arn: smithy_client_1.expectString,
        ExpirationTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Id: smithy_client_1.expectString,
        Parties: smithy_client_1._json,
        RequestedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Resources: (_) => de_HandshakeResources(_, context),
        State: smithy_client_1.expectString,
    });
};
const de_HandshakeResource = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Resources: (_) => de_HandshakeResources(_, context),
        Type: smithy_client_1.expectString,
        Value: smithy_client_1.expectString,
    });
};
const de_HandshakeResources = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HandshakeResource(entry, context);
    });
    return retVal;
};
const de_Handshakes = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Handshake(entry, context);
    });
    return retVal;
};
const de_InviteAccountToOrganizationResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Handshake: (_) => de_Handshake(_, context),
    });
};
const de_ListAccountsForParentResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Accounts: (_) => de_Accounts(_, context),
        NextToken: smithy_client_1.expectString,
    });
};
const de_ListAccountsResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Accounts: (_) => de_Accounts(_, context),
        NextToken: smithy_client_1.expectString,
    });
};
const de_ListAWSServiceAccessForOrganizationResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        EnabledServicePrincipals: (_) => de_EnabledServicePrincipals(_, context),
        NextToken: smithy_client_1.expectString,
    });
};
const de_ListCreateAccountStatusResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CreateAccountStatuses: (_) => de_CreateAccountStatuses(_, context),
        NextToken: smithy_client_1.expectString,
    });
};
const de_ListDelegatedAdministratorsResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        DelegatedAdministrators: (_) => de_DelegatedAdministrators(_, context),
        NextToken: smithy_client_1.expectString,
    });
};
const de_ListDelegatedServicesForAccountResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        DelegatedServices: (_) => de_DelegatedServices(_, context),
        NextToken: smithy_client_1.expectString,
    });
};
const de_ListHandshakesForAccountResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Handshakes: (_) => de_Handshakes(_, context),
        NextToken: smithy_client_1.expectString,
    });
};
const de_ListHandshakesForOrganizationResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Handshakes: (_) => de_Handshakes(_, context),
        NextToken: smithy_client_1.expectString,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => (0, smithy_client_1.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = (0, smithy_client_1.withBaseException)(OrganizationsServiceException_1.OrganizationsServiceException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocol_http_1.HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `AWSOrganizationsV20161128.${operation}`,
    };
}
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
