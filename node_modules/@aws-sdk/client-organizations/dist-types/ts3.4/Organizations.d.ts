import { HttpHandlerOptions as __HttpHandlerOptions } from "@smithy/types";
import {
  AcceptHandshakeCommandInput,
  AcceptHandshakeCommandOutput,
} from "./commands/AcceptHandshakeCommand";
import {
  AttachPolicyCommandInput,
  AttachPolicyCommandOutput,
} from "./commands/AttachPolicyCommand";
import {
  CancelHandshakeCommandInput,
  CancelHandshakeCommandOutput,
} from "./commands/CancelHandshakeCommand";
import {
  CloseAccountCommandInput,
  CloseAccountCommandOutput,
} from "./commands/CloseAccountCommand";
import {
  CreateAccountCommandInput,
  CreateAccountCommandOutput,
} from "./commands/CreateAccountCommand";
import {
  CreateGovCloudAccountCommandInput,
  CreateGovCloudAccountCommandOutput,
} from "./commands/CreateGovCloudAccountCommand";
import {
  CreateOrganizationalUnitCommandInput,
  CreateOrganizationalUnitCommandOutput,
} from "./commands/CreateOrganizationalUnitCommand";
import {
  CreateOrganizationCommandInput,
  CreateOrganizationCommandOutput,
} from "./commands/CreateOrganizationCommand";
import {
  CreatePolicyCommandInput,
  CreatePolicyCommandOutput,
} from "./commands/CreatePolicyCommand";
import {
  DeclineHandshakeCommandInput,
  DeclineHandshakeCommandOutput,
} from "./commands/DeclineHandshakeCommand";
import {
  DeleteOrganizationalUnitCommandInput,
  DeleteOrganizationalUnitCommandOutput,
} from "./commands/DeleteOrganizationalUnitCommand";
import {
  DeleteOrganizationCommandInput,
  DeleteOrganizationCommandOutput,
} from "./commands/DeleteOrganizationCommand";
import {
  DeletePolicyCommandInput,
  DeletePolicyCommandOutput,
} from "./commands/DeletePolicyCommand";
import {
  DeleteResourcePolicyCommandInput,
  DeleteResourcePolicyCommandOutput,
} from "./commands/DeleteResourcePolicyCommand";
import {
  DeregisterDelegatedAdministratorCommandInput,
  DeregisterDelegatedAdministratorCommandOutput,
} from "./commands/DeregisterDelegatedAdministratorCommand";
import {
  DescribeAccountCommandInput,
  DescribeAccountCommandOutput,
} from "./commands/DescribeAccountCommand";
import {
  DescribeCreateAccountStatusCommandInput,
  DescribeCreateAccountStatusCommandOutput,
} from "./commands/DescribeCreateAccountStatusCommand";
import {
  DescribeEffectivePolicyCommandInput,
  DescribeEffectivePolicyCommandOutput,
} from "./commands/DescribeEffectivePolicyCommand";
import {
  DescribeHandshakeCommandInput,
  DescribeHandshakeCommandOutput,
} from "./commands/DescribeHandshakeCommand";
import {
  DescribeOrganizationalUnitCommandInput,
  DescribeOrganizationalUnitCommandOutput,
} from "./commands/DescribeOrganizationalUnitCommand";
import {
  DescribeOrganizationCommandInput,
  DescribeOrganizationCommandOutput,
} from "./commands/DescribeOrganizationCommand";
import {
  DescribePolicyCommandInput,
  DescribePolicyCommandOutput,
} from "./commands/DescribePolicyCommand";
import {
  DescribeResourcePolicyCommandInput,
  DescribeResourcePolicyCommandOutput,
} from "./commands/DescribeResourcePolicyCommand";
import {
  DetachPolicyCommandInput,
  DetachPolicyCommandOutput,
} from "./commands/DetachPolicyCommand";
import {
  DisableAWSServiceAccessCommandInput,
  DisableAWSServiceAccessCommandOutput,
} from "./commands/DisableAWSServiceAccessCommand";
import {
  DisablePolicyTypeCommandInput,
  DisablePolicyTypeCommandOutput,
} from "./commands/DisablePolicyTypeCommand";
import {
  EnableAllFeaturesCommandInput,
  EnableAllFeaturesCommandOutput,
} from "./commands/EnableAllFeaturesCommand";
import {
  EnableAWSServiceAccessCommandInput,
  EnableAWSServiceAccessCommandOutput,
} from "./commands/EnableAWSServiceAccessCommand";
import {
  EnablePolicyTypeCommandInput,
  EnablePolicyTypeCommandOutput,
} from "./commands/EnablePolicyTypeCommand";
import {
  InviteAccountToOrganizationCommandInput,
  InviteAccountToOrganizationCommandOutput,
} from "./commands/InviteAccountToOrganizationCommand";
import {
  LeaveOrganizationCommandInput,
  LeaveOrganizationCommandOutput,
} from "./commands/LeaveOrganizationCommand";
import {
  ListAccountsCommandInput,
  ListAccountsCommandOutput,
} from "./commands/ListAccountsCommand";
import {
  ListAccountsForParentCommandInput,
  ListAccountsForParentCommandOutput,
} from "./commands/ListAccountsForParentCommand";
import {
  ListAWSServiceAccessForOrganizationCommandInput,
  ListAWSServiceAccessForOrganizationCommandOutput,
} from "./commands/ListAWSServiceAccessForOrganizationCommand";
import {
  ListChildrenCommandInput,
  ListChildrenCommandOutput,
} from "./commands/ListChildrenCommand";
import {
  ListCreateAccountStatusCommandInput,
  ListCreateAccountStatusCommandOutput,
} from "./commands/ListCreateAccountStatusCommand";
import {
  ListDelegatedAdministratorsCommandInput,
  ListDelegatedAdministratorsCommandOutput,
} from "./commands/ListDelegatedAdministratorsCommand";
import {
  ListDelegatedServicesForAccountCommandInput,
  ListDelegatedServicesForAccountCommandOutput,
} from "./commands/ListDelegatedServicesForAccountCommand";
import {
  ListHandshakesForAccountCommandInput,
  ListHandshakesForAccountCommandOutput,
} from "./commands/ListHandshakesForAccountCommand";
import {
  ListHandshakesForOrganizationCommandInput,
  ListHandshakesForOrganizationCommandOutput,
} from "./commands/ListHandshakesForOrganizationCommand";
import {
  ListOrganizationalUnitsForParentCommandInput,
  ListOrganizationalUnitsForParentCommandOutput,
} from "./commands/ListOrganizationalUnitsForParentCommand";
import {
  ListParentsCommandInput,
  ListParentsCommandOutput,
} from "./commands/ListParentsCommand";
import {
  ListPoliciesCommandInput,
  ListPoliciesCommandOutput,
} from "./commands/ListPoliciesCommand";
import {
  ListPoliciesForTargetCommandInput,
  ListPoliciesForTargetCommandOutput,
} from "./commands/ListPoliciesForTargetCommand";
import {
  ListRootsCommandInput,
  ListRootsCommandOutput,
} from "./commands/ListRootsCommand";
import {
  ListTagsForResourceCommandInput,
  ListTagsForResourceCommandOutput,
} from "./commands/ListTagsForResourceCommand";
import {
  ListTargetsForPolicyCommandInput,
  ListTargetsForPolicyCommandOutput,
} from "./commands/ListTargetsForPolicyCommand";
import {
  MoveAccountCommandInput,
  MoveAccountCommandOutput,
} from "./commands/MoveAccountCommand";
import {
  PutResourcePolicyCommandInput,
  PutResourcePolicyCommandOutput,
} from "./commands/PutResourcePolicyCommand";
import {
  RegisterDelegatedAdministratorCommandInput,
  RegisterDelegatedAdministratorCommandOutput,
} from "./commands/RegisterDelegatedAdministratorCommand";
import {
  RemoveAccountFromOrganizationCommandInput,
  RemoveAccountFromOrganizationCommandOutput,
} from "./commands/RemoveAccountFromOrganizationCommand";
import {
  TagResourceCommandInput,
  TagResourceCommandOutput,
} from "./commands/TagResourceCommand";
import {
  UntagResourceCommandInput,
  UntagResourceCommandOutput,
} from "./commands/UntagResourceCommand";
import {
  UpdateOrganizationalUnitCommandInput,
  UpdateOrganizationalUnitCommandOutput,
} from "./commands/UpdateOrganizationalUnitCommand";
import {
  UpdatePolicyCommandInput,
  UpdatePolicyCommandOutput,
} from "./commands/UpdatePolicyCommand";
import { OrganizationsClient } from "./OrganizationsClient";
export interface Organizations {
  acceptHandshake(
    args: AcceptHandshakeCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<AcceptHandshakeCommandOutput>;
  acceptHandshake(
    args: AcceptHandshakeCommandInput,
    cb: (err: any, data?: AcceptHandshakeCommandOutput) => void
  ): void;
  acceptHandshake(
    args: AcceptHandshakeCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: AcceptHandshakeCommandOutput) => void
  ): void;
  attachPolicy(
    args: AttachPolicyCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<AttachPolicyCommandOutput>;
  attachPolicy(
    args: AttachPolicyCommandInput,
    cb: (err: any, data?: AttachPolicyCommandOutput) => void
  ): void;
  attachPolicy(
    args: AttachPolicyCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: AttachPolicyCommandOutput) => void
  ): void;
  cancelHandshake(
    args: CancelHandshakeCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CancelHandshakeCommandOutput>;
  cancelHandshake(
    args: CancelHandshakeCommandInput,
    cb: (err: any, data?: CancelHandshakeCommandOutput) => void
  ): void;
  cancelHandshake(
    args: CancelHandshakeCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CancelHandshakeCommandOutput) => void
  ): void;
  closeAccount(
    args: CloseAccountCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CloseAccountCommandOutput>;
  closeAccount(
    args: CloseAccountCommandInput,
    cb: (err: any, data?: CloseAccountCommandOutput) => void
  ): void;
  closeAccount(
    args: CloseAccountCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CloseAccountCommandOutput) => void
  ): void;
  createAccount(
    args: CreateAccountCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateAccountCommandOutput>;
  createAccount(
    args: CreateAccountCommandInput,
    cb: (err: any, data?: CreateAccountCommandOutput) => void
  ): void;
  createAccount(
    args: CreateAccountCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateAccountCommandOutput) => void
  ): void;
  createGovCloudAccount(
    args: CreateGovCloudAccountCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateGovCloudAccountCommandOutput>;
  createGovCloudAccount(
    args: CreateGovCloudAccountCommandInput,
    cb: (err: any, data?: CreateGovCloudAccountCommandOutput) => void
  ): void;
  createGovCloudAccount(
    args: CreateGovCloudAccountCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateGovCloudAccountCommandOutput) => void
  ): void;
  createOrganization(
    args: CreateOrganizationCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateOrganizationCommandOutput>;
  createOrganization(
    args: CreateOrganizationCommandInput,
    cb: (err: any, data?: CreateOrganizationCommandOutput) => void
  ): void;
  createOrganization(
    args: CreateOrganizationCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateOrganizationCommandOutput) => void
  ): void;
  createOrganizationalUnit(
    args: CreateOrganizationalUnitCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateOrganizationalUnitCommandOutput>;
  createOrganizationalUnit(
    args: CreateOrganizationalUnitCommandInput,
    cb: (err: any, data?: CreateOrganizationalUnitCommandOutput) => void
  ): void;
  createOrganizationalUnit(
    args: CreateOrganizationalUnitCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateOrganizationalUnitCommandOutput) => void
  ): void;
  createPolicy(
    args: CreatePolicyCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreatePolicyCommandOutput>;
  createPolicy(
    args: CreatePolicyCommandInput,
    cb: (err: any, data?: CreatePolicyCommandOutput) => void
  ): void;
  createPolicy(
    args: CreatePolicyCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreatePolicyCommandOutput) => void
  ): void;
  declineHandshake(
    args: DeclineHandshakeCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeclineHandshakeCommandOutput>;
  declineHandshake(
    args: DeclineHandshakeCommandInput,
    cb: (err: any, data?: DeclineHandshakeCommandOutput) => void
  ): void;
  declineHandshake(
    args: DeclineHandshakeCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeclineHandshakeCommandOutput) => void
  ): void;
  deleteOrganization(
    args: DeleteOrganizationCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteOrganizationCommandOutput>;
  deleteOrganization(
    args: DeleteOrganizationCommandInput,
    cb: (err: any, data?: DeleteOrganizationCommandOutput) => void
  ): void;
  deleteOrganization(
    args: DeleteOrganizationCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteOrganizationCommandOutput) => void
  ): void;
  deleteOrganizationalUnit(
    args: DeleteOrganizationalUnitCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteOrganizationalUnitCommandOutput>;
  deleteOrganizationalUnit(
    args: DeleteOrganizationalUnitCommandInput,
    cb: (err: any, data?: DeleteOrganizationalUnitCommandOutput) => void
  ): void;
  deleteOrganizationalUnit(
    args: DeleteOrganizationalUnitCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteOrganizationalUnitCommandOutput) => void
  ): void;
  deletePolicy(
    args: DeletePolicyCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeletePolicyCommandOutput>;
  deletePolicy(
    args: DeletePolicyCommandInput,
    cb: (err: any, data?: DeletePolicyCommandOutput) => void
  ): void;
  deletePolicy(
    args: DeletePolicyCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeletePolicyCommandOutput) => void
  ): void;
  deleteResourcePolicy(
    args: DeleteResourcePolicyCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteResourcePolicyCommandOutput>;
  deleteResourcePolicy(
    args: DeleteResourcePolicyCommandInput,
    cb: (err: any, data?: DeleteResourcePolicyCommandOutput) => void
  ): void;
  deleteResourcePolicy(
    args: DeleteResourcePolicyCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteResourcePolicyCommandOutput) => void
  ): void;
  deregisterDelegatedAdministrator(
    args: DeregisterDelegatedAdministratorCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeregisterDelegatedAdministratorCommandOutput>;
  deregisterDelegatedAdministrator(
    args: DeregisterDelegatedAdministratorCommandInput,
    cb: (err: any, data?: DeregisterDelegatedAdministratorCommandOutput) => void
  ): void;
  deregisterDelegatedAdministrator(
    args: DeregisterDelegatedAdministratorCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeregisterDelegatedAdministratorCommandOutput) => void
  ): void;
  describeAccount(
    args: DescribeAccountCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeAccountCommandOutput>;
  describeAccount(
    args: DescribeAccountCommandInput,
    cb: (err: any, data?: DescribeAccountCommandOutput) => void
  ): void;
  describeAccount(
    args: DescribeAccountCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeAccountCommandOutput) => void
  ): void;
  describeCreateAccountStatus(
    args: DescribeCreateAccountStatusCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeCreateAccountStatusCommandOutput>;
  describeCreateAccountStatus(
    args: DescribeCreateAccountStatusCommandInput,
    cb: (err: any, data?: DescribeCreateAccountStatusCommandOutput) => void
  ): void;
  describeCreateAccountStatus(
    args: DescribeCreateAccountStatusCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeCreateAccountStatusCommandOutput) => void
  ): void;
  describeEffectivePolicy(
    args: DescribeEffectivePolicyCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeEffectivePolicyCommandOutput>;
  describeEffectivePolicy(
    args: DescribeEffectivePolicyCommandInput,
    cb: (err: any, data?: DescribeEffectivePolicyCommandOutput) => void
  ): void;
  describeEffectivePolicy(
    args: DescribeEffectivePolicyCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeEffectivePolicyCommandOutput) => void
  ): void;
  describeHandshake(
    args: DescribeHandshakeCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeHandshakeCommandOutput>;
  describeHandshake(
    args: DescribeHandshakeCommandInput,
    cb: (err: any, data?: DescribeHandshakeCommandOutput) => void
  ): void;
  describeHandshake(
    args: DescribeHandshakeCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeHandshakeCommandOutput) => void
  ): void;
  describeOrganization(
    args: DescribeOrganizationCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeOrganizationCommandOutput>;
  describeOrganization(
    args: DescribeOrganizationCommandInput,
    cb: (err: any, data?: DescribeOrganizationCommandOutput) => void
  ): void;
  describeOrganization(
    args: DescribeOrganizationCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeOrganizationCommandOutput) => void
  ): void;
  describeOrganizationalUnit(
    args: DescribeOrganizationalUnitCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeOrganizationalUnitCommandOutput>;
  describeOrganizationalUnit(
    args: DescribeOrganizationalUnitCommandInput,
    cb: (err: any, data?: DescribeOrganizationalUnitCommandOutput) => void
  ): void;
  describeOrganizationalUnit(
    args: DescribeOrganizationalUnitCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeOrganizationalUnitCommandOutput) => void
  ): void;
  describePolicy(
    args: DescribePolicyCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribePolicyCommandOutput>;
  describePolicy(
    args: DescribePolicyCommandInput,
    cb: (err: any, data?: DescribePolicyCommandOutput) => void
  ): void;
  describePolicy(
    args: DescribePolicyCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribePolicyCommandOutput) => void
  ): void;
  describeResourcePolicy(
    args: DescribeResourcePolicyCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeResourcePolicyCommandOutput>;
  describeResourcePolicy(
    args: DescribeResourcePolicyCommandInput,
    cb: (err: any, data?: DescribeResourcePolicyCommandOutput) => void
  ): void;
  describeResourcePolicy(
    args: DescribeResourcePolicyCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeResourcePolicyCommandOutput) => void
  ): void;
  detachPolicy(
    args: DetachPolicyCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DetachPolicyCommandOutput>;
  detachPolicy(
    args: DetachPolicyCommandInput,
    cb: (err: any, data?: DetachPolicyCommandOutput) => void
  ): void;
  detachPolicy(
    args: DetachPolicyCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DetachPolicyCommandOutput) => void
  ): void;
  disableAWSServiceAccess(
    args: DisableAWSServiceAccessCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DisableAWSServiceAccessCommandOutput>;
  disableAWSServiceAccess(
    args: DisableAWSServiceAccessCommandInput,
    cb: (err: any, data?: DisableAWSServiceAccessCommandOutput) => void
  ): void;
  disableAWSServiceAccess(
    args: DisableAWSServiceAccessCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DisableAWSServiceAccessCommandOutput) => void
  ): void;
  disablePolicyType(
    args: DisablePolicyTypeCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DisablePolicyTypeCommandOutput>;
  disablePolicyType(
    args: DisablePolicyTypeCommandInput,
    cb: (err: any, data?: DisablePolicyTypeCommandOutput) => void
  ): void;
  disablePolicyType(
    args: DisablePolicyTypeCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DisablePolicyTypeCommandOutput) => void
  ): void;
  enableAllFeatures(
    args: EnableAllFeaturesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<EnableAllFeaturesCommandOutput>;
  enableAllFeatures(
    args: EnableAllFeaturesCommandInput,
    cb: (err: any, data?: EnableAllFeaturesCommandOutput) => void
  ): void;
  enableAllFeatures(
    args: EnableAllFeaturesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: EnableAllFeaturesCommandOutput) => void
  ): void;
  enableAWSServiceAccess(
    args: EnableAWSServiceAccessCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<EnableAWSServiceAccessCommandOutput>;
  enableAWSServiceAccess(
    args: EnableAWSServiceAccessCommandInput,
    cb: (err: any, data?: EnableAWSServiceAccessCommandOutput) => void
  ): void;
  enableAWSServiceAccess(
    args: EnableAWSServiceAccessCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: EnableAWSServiceAccessCommandOutput) => void
  ): void;
  enablePolicyType(
    args: EnablePolicyTypeCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<EnablePolicyTypeCommandOutput>;
  enablePolicyType(
    args: EnablePolicyTypeCommandInput,
    cb: (err: any, data?: EnablePolicyTypeCommandOutput) => void
  ): void;
  enablePolicyType(
    args: EnablePolicyTypeCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: EnablePolicyTypeCommandOutput) => void
  ): void;
  inviteAccountToOrganization(
    args: InviteAccountToOrganizationCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<InviteAccountToOrganizationCommandOutput>;
  inviteAccountToOrganization(
    args: InviteAccountToOrganizationCommandInput,
    cb: (err: any, data?: InviteAccountToOrganizationCommandOutput) => void
  ): void;
  inviteAccountToOrganization(
    args: InviteAccountToOrganizationCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: InviteAccountToOrganizationCommandOutput) => void
  ): void;
  leaveOrganization(
    args: LeaveOrganizationCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<LeaveOrganizationCommandOutput>;
  leaveOrganization(
    args: LeaveOrganizationCommandInput,
    cb: (err: any, data?: LeaveOrganizationCommandOutput) => void
  ): void;
  leaveOrganization(
    args: LeaveOrganizationCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: LeaveOrganizationCommandOutput) => void
  ): void;
  listAccounts(
    args: ListAccountsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListAccountsCommandOutput>;
  listAccounts(
    args: ListAccountsCommandInput,
    cb: (err: any, data?: ListAccountsCommandOutput) => void
  ): void;
  listAccounts(
    args: ListAccountsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListAccountsCommandOutput) => void
  ): void;
  listAccountsForParent(
    args: ListAccountsForParentCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListAccountsForParentCommandOutput>;
  listAccountsForParent(
    args: ListAccountsForParentCommandInput,
    cb: (err: any, data?: ListAccountsForParentCommandOutput) => void
  ): void;
  listAccountsForParent(
    args: ListAccountsForParentCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListAccountsForParentCommandOutput) => void
  ): void;
  listAWSServiceAccessForOrganization(
    args: ListAWSServiceAccessForOrganizationCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListAWSServiceAccessForOrganizationCommandOutput>;
  listAWSServiceAccessForOrganization(
    args: ListAWSServiceAccessForOrganizationCommandInput,
    cb: (
      err: any,
      data?: ListAWSServiceAccessForOrganizationCommandOutput
    ) => void
  ): void;
  listAWSServiceAccessForOrganization(
    args: ListAWSServiceAccessForOrganizationCommandInput,
    options: __HttpHandlerOptions,
    cb: (
      err: any,
      data?: ListAWSServiceAccessForOrganizationCommandOutput
    ) => void
  ): void;
  listChildren(
    args: ListChildrenCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListChildrenCommandOutput>;
  listChildren(
    args: ListChildrenCommandInput,
    cb: (err: any, data?: ListChildrenCommandOutput) => void
  ): void;
  listChildren(
    args: ListChildrenCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListChildrenCommandOutput) => void
  ): void;
  listCreateAccountStatus(
    args: ListCreateAccountStatusCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListCreateAccountStatusCommandOutput>;
  listCreateAccountStatus(
    args: ListCreateAccountStatusCommandInput,
    cb: (err: any, data?: ListCreateAccountStatusCommandOutput) => void
  ): void;
  listCreateAccountStatus(
    args: ListCreateAccountStatusCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListCreateAccountStatusCommandOutput) => void
  ): void;
  listDelegatedAdministrators(
    args: ListDelegatedAdministratorsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListDelegatedAdministratorsCommandOutput>;
  listDelegatedAdministrators(
    args: ListDelegatedAdministratorsCommandInput,
    cb: (err: any, data?: ListDelegatedAdministratorsCommandOutput) => void
  ): void;
  listDelegatedAdministrators(
    args: ListDelegatedAdministratorsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListDelegatedAdministratorsCommandOutput) => void
  ): void;
  listDelegatedServicesForAccount(
    args: ListDelegatedServicesForAccountCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListDelegatedServicesForAccountCommandOutput>;
  listDelegatedServicesForAccount(
    args: ListDelegatedServicesForAccountCommandInput,
    cb: (err: any, data?: ListDelegatedServicesForAccountCommandOutput) => void
  ): void;
  listDelegatedServicesForAccount(
    args: ListDelegatedServicesForAccountCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListDelegatedServicesForAccountCommandOutput) => void
  ): void;
  listHandshakesForAccount(
    args: ListHandshakesForAccountCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListHandshakesForAccountCommandOutput>;
  listHandshakesForAccount(
    args: ListHandshakesForAccountCommandInput,
    cb: (err: any, data?: ListHandshakesForAccountCommandOutput) => void
  ): void;
  listHandshakesForAccount(
    args: ListHandshakesForAccountCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListHandshakesForAccountCommandOutput) => void
  ): void;
  listHandshakesForOrganization(
    args: ListHandshakesForOrganizationCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListHandshakesForOrganizationCommandOutput>;
  listHandshakesForOrganization(
    args: ListHandshakesForOrganizationCommandInput,
    cb: (err: any, data?: ListHandshakesForOrganizationCommandOutput) => void
  ): void;
  listHandshakesForOrganization(
    args: ListHandshakesForOrganizationCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListHandshakesForOrganizationCommandOutput) => void
  ): void;
  listOrganizationalUnitsForParent(
    args: ListOrganizationalUnitsForParentCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListOrganizationalUnitsForParentCommandOutput>;
  listOrganizationalUnitsForParent(
    args: ListOrganizationalUnitsForParentCommandInput,
    cb: (err: any, data?: ListOrganizationalUnitsForParentCommandOutput) => void
  ): void;
  listOrganizationalUnitsForParent(
    args: ListOrganizationalUnitsForParentCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListOrganizationalUnitsForParentCommandOutput) => void
  ): void;
  listParents(
    args: ListParentsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListParentsCommandOutput>;
  listParents(
    args: ListParentsCommandInput,
    cb: (err: any, data?: ListParentsCommandOutput) => void
  ): void;
  listParents(
    args: ListParentsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListParentsCommandOutput) => void
  ): void;
  listPolicies(
    args: ListPoliciesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListPoliciesCommandOutput>;
  listPolicies(
    args: ListPoliciesCommandInput,
    cb: (err: any, data?: ListPoliciesCommandOutput) => void
  ): void;
  listPolicies(
    args: ListPoliciesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListPoliciesCommandOutput) => void
  ): void;
  listPoliciesForTarget(
    args: ListPoliciesForTargetCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListPoliciesForTargetCommandOutput>;
  listPoliciesForTarget(
    args: ListPoliciesForTargetCommandInput,
    cb: (err: any, data?: ListPoliciesForTargetCommandOutput) => void
  ): void;
  listPoliciesForTarget(
    args: ListPoliciesForTargetCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListPoliciesForTargetCommandOutput) => void
  ): void;
  listRoots(
    args: ListRootsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListRootsCommandOutput>;
  listRoots(
    args: ListRootsCommandInput,
    cb: (err: any, data?: ListRootsCommandOutput) => void
  ): void;
  listRoots(
    args: ListRootsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListRootsCommandOutput) => void
  ): void;
  listTagsForResource(
    args: ListTagsForResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListTagsForResourceCommandOutput>;
  listTagsForResource(
    args: ListTagsForResourceCommandInput,
    cb: (err: any, data?: ListTagsForResourceCommandOutput) => void
  ): void;
  listTagsForResource(
    args: ListTagsForResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListTagsForResourceCommandOutput) => void
  ): void;
  listTargetsForPolicy(
    args: ListTargetsForPolicyCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListTargetsForPolicyCommandOutput>;
  listTargetsForPolicy(
    args: ListTargetsForPolicyCommandInput,
    cb: (err: any, data?: ListTargetsForPolicyCommandOutput) => void
  ): void;
  listTargetsForPolicy(
    args: ListTargetsForPolicyCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListTargetsForPolicyCommandOutput) => void
  ): void;
  moveAccount(
    args: MoveAccountCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<MoveAccountCommandOutput>;
  moveAccount(
    args: MoveAccountCommandInput,
    cb: (err: any, data?: MoveAccountCommandOutput) => void
  ): void;
  moveAccount(
    args: MoveAccountCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: MoveAccountCommandOutput) => void
  ): void;
  putResourcePolicy(
    args: PutResourcePolicyCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<PutResourcePolicyCommandOutput>;
  putResourcePolicy(
    args: PutResourcePolicyCommandInput,
    cb: (err: any, data?: PutResourcePolicyCommandOutput) => void
  ): void;
  putResourcePolicy(
    args: PutResourcePolicyCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: PutResourcePolicyCommandOutput) => void
  ): void;
  registerDelegatedAdministrator(
    args: RegisterDelegatedAdministratorCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<RegisterDelegatedAdministratorCommandOutput>;
  registerDelegatedAdministrator(
    args: RegisterDelegatedAdministratorCommandInput,
    cb: (err: any, data?: RegisterDelegatedAdministratorCommandOutput) => void
  ): void;
  registerDelegatedAdministrator(
    args: RegisterDelegatedAdministratorCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: RegisterDelegatedAdministratorCommandOutput) => void
  ): void;
  removeAccountFromOrganization(
    args: RemoveAccountFromOrganizationCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<RemoveAccountFromOrganizationCommandOutput>;
  removeAccountFromOrganization(
    args: RemoveAccountFromOrganizationCommandInput,
    cb: (err: any, data?: RemoveAccountFromOrganizationCommandOutput) => void
  ): void;
  removeAccountFromOrganization(
    args: RemoveAccountFromOrganizationCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: RemoveAccountFromOrganizationCommandOutput) => void
  ): void;
  tagResource(
    args: TagResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<TagResourceCommandOutput>;
  tagResource(
    args: TagResourceCommandInput,
    cb: (err: any, data?: TagResourceCommandOutput) => void
  ): void;
  tagResource(
    args: TagResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: TagResourceCommandOutput) => void
  ): void;
  untagResource(
    args: UntagResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UntagResourceCommandOutput>;
  untagResource(
    args: UntagResourceCommandInput,
    cb: (err: any, data?: UntagResourceCommandOutput) => void
  ): void;
  untagResource(
    args: UntagResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UntagResourceCommandOutput) => void
  ): void;
  updateOrganizationalUnit(
    args: UpdateOrganizationalUnitCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UpdateOrganizationalUnitCommandOutput>;
  updateOrganizationalUnit(
    args: UpdateOrganizationalUnitCommandInput,
    cb: (err: any, data?: UpdateOrganizationalUnitCommandOutput) => void
  ): void;
  updateOrganizationalUnit(
    args: UpdateOrganizationalUnitCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UpdateOrganizationalUnitCommandOutput) => void
  ): void;
  updatePolicy(
    args: UpdatePolicyCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UpdatePolicyCommandOutput>;
  updatePolicy(
    args: UpdatePolicyCommandInput,
    cb: (err: any, data?: UpdatePolicyCommandOutput) => void
  ): void;
  updatePolicy(
    args: UpdatePolicyCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UpdatePolicyCommandOutput) => void
  ): void;
}
export declare class Organizations
  extends OrganizationsClient
  implements Organizations {}
